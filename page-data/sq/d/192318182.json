{"data":{"site":{"siteMetadata":{"showChartResize":true,"themeSwitcher":"g2","showAPIDoc":true,"githubUrl":"https://github.com/antvis/g2","showExampleDemoTitle":false,"playground":{"extraLib":"declare module '@antv/g2'{\n          import { Adjust } from '@antv/adjust';\r\nimport { Attribute } from '@antv/attr';\r\nimport { AxisLabelCfg } from '@antv/component';\r\nimport { AxisLineCfg } from '@antv/component';\r\nimport { AxisSubTickLineCfg } from '@antv/component';\r\nimport { AxisTickLineCfg } from '@antv/component';\r\nimport { AxisTitleCfg } from '@antv/component';\r\nimport { BBox } from '@antv/g-base';\r\nimport { CategoryLegendCfg } from '@antv/component';\r\nimport { ContinueLegendHandlerCfg } from '@antv/component';\r\nimport { ContinueLegendLabelCfg } from '@antv/component';\r\nimport { ContinueLegendRailCfg } from '@antv/component';\r\nimport { ContinueLegendTrackCfg } from '@antv/component';\r\nimport { Coordinate } from '@antv/coord';\r\nimport { CrosshairLineCfg } from '@antv/component';\r\nimport { CrosshairTextBackgroundCfg } from '@antv/component';\r\nimport { CrosshairTextCfg } from '@antv/component';\r\nimport EE from '@antv/event-emitter';\r\nimport { EnhancedTextCfg } from '@antv/component';\r\nimport { GridLineCfg } from '@antv/component';\r\nimport { GroupComponent } from '@antv/component';\r\nimport { HtmlComponent } from '@antv/component';\r\nimport { ICanvas } from '@antv/g-base';\r\nimport { IGroup } from '@antv/g-base';\r\nimport { IShape } from '@antv/g-base';\r\nimport { LegendBackgroundCfg } from '@antv/component';\r\nimport { LegendItemNameCfg } from '@antv/component';\r\nimport { LegendItemValueCfg } from '@antv/component';\r\nimport { LegendMarkerCfg } from '@antv/component';\r\nimport { LegendPageNavigatorCfg } from '@antv/component';\r\nimport { LegendRadio } from '@antv/component';\r\nimport { LegendTitleCfg } from '@antv/component';\r\nimport { LineAnnotationTextCfg } from '@antv/component';\r\nimport { PathCommand } from '@antv/g-base';\r\nimport { Point as Point_2 } from '@antv/g-base';\r\nimport { Scale } from '@antv/scale';\r\nimport { ScaleConfig } from '@antv/scale';\r\nimport { ShapeAttrs } from '@antv/g-base';\r\nimport { TrendCfg } from '@antv/component';\r\n\r\n/**\r\n * @title 数据调整配置项定义，`geometry.adjust({})`\r\n */\r\ndeclare interface AdjustOption {\r\n    /**\r\n     * @title 数据调整类型。\r\n     */\r\n    readonly type: AdjustType;\r\n    /**\r\n     * @title 间距\r\n     * @description 该属性只对 'dodge' 类型生效，取 0 到 1 范围的值（相对于每个柱子宽度），用于控制一个分组中柱子之间的间距。\r\n     * @see ![image](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*ps3pToOg2nwAAAAAAAAAAABkARQnAQ)\r\n     */\r\n    readonly marginRatio?: number;\r\n    /**\r\n     * @title 分组字段\r\n     * @description 该属性只对 'dodge' 类型生效，声明以哪个数据字段为分组依据。\r\n     */\r\n    readonly dodgeBy?: string;\r\n    /**\r\n     * @title 是否反序\r\n     * @description 该属性只对 'stack' 类型生效，用于控制是否对数据进行反序操作。\r\n     */\r\n    readonly reverseOrder?: boolean;\r\n}\r\n\r\n/**\r\n * @title G2 提供的 adjust 类型\r\n */\r\ndeclare type AdjustType = 'stack' | 'jitter' | 'dodge' | 'symmetric';\r\n\r\n/**\r\n * @title Options 中 legends 的配置定义\r\n */\r\ndeclare type AllLegendsOptions = LegendCfg | Record<string, LegendOption> | boolean;\r\n\r\n/**\r\n * @title 用户配置的动画，属性均可选\r\n */\r\ndeclare interface AnimateCfg {\r\n    /**\r\n     * @title 动画缓动函数\r\n     */\r\n    readonly easing?: string | AnimateEasingCallback;\r\n    /**\r\n     * @title 动画执行函数\r\n     */\r\n    readonly animation?: string;\r\n    /**\r\n     * @title 动画执行时间\r\n     */\r\n    readonly duration?: number | AnimateDurationCallback;\r\n    /**\r\n     * @title 动画延迟时间\r\n     */\r\n    readonly delay?: number | AnimateDelayCallback;\r\n    /**\r\n     * @title 动画执行结束后的回调函数\r\n     */\r\n    readonly callback?: () => any;\r\n    /**\r\n     * @title 动画是否重复\r\n     */\r\n    readonly repeat?: boolean;\r\n}\r\n\r\n/**\r\n * @title delay 的回调函数， 入参 data 为对应的原始数据记录\r\n */\r\ndeclare type AnimateDelayCallback = (data: Datum) => number;\r\n\r\n/**\r\n * @title duration 的回调函数， 入参 data 为对应的原始数据记录\r\n */\r\ndeclare type AnimateDurationCallback = (data: Datum) => number;\r\n\r\n/**\r\n * @title easing 的回调函数， 入参 data 为对应的原始数据记录\r\n */\r\ndeclare type AnimateEasingCallback = (data: Datum) => string;\r\n\r\n/**\r\n * @title Geometry 动画参数配置。geometry.animate()\r\n */\r\ndeclare interface AnimateOption {\r\n    /**\r\n     * @title chart 初始化渲染时的入场动画，false/null 表示关闭入场动画。\r\n     */\r\n    appear?: AnimateCfg | false | null;\r\n    /**\r\n     * @title chart 发生更新时，新增元素的入场动画，false/null 表示关闭入场动画。\r\n     */\r\n    enter?: AnimateCfg | false | null;\r\n    /**\r\n     * @title 更新动画配置，false/null 表示关闭更新动画。\r\n     */\r\n    update?: AnimateCfg | false | null;\r\n    /**\r\n     * @title 销毁动画配置，false/null 表示关闭销毁动画。\r\n     */\r\n    leave?: AnimateCfg | false | null;\r\n}\r\n\r\n/**\r\n * Annotation controller, 主要作用:\r\n * 1. 创建 Annotation: line、text、arc ...\r\n * 2. 生命周期: init、layout、render、clear、destroy\r\n */\r\ndeclare class Annotation extends Controller<AnnotationBaseOption[]> {\r\n    private foregroundContainer;\r\n    private backgroundContainer;\r\n    private cache;\r\n    constructor(view: View);\r\n    get name(): string;\r\n    init(): void;\r\n    /**\r\n     * 因为 annotation 需要依赖坐标系信息，所以 render 阶段为空方法，实际的创建逻辑都在 layout 中\r\n     */\r\n    layout(): void;\r\n    render(): void;\r\n    /**\r\n     * 更新\r\n     */\r\n    update(): void;\r\n    /**\r\n     * 清空\r\n     * @param includeOption 是否清空 option 配置项\r\n     */\r\n    clear(includeOption?: boolean): void;\r\n    destroy(): void;\r\n    /**\r\n     * 复写基类的方法\r\n     */\r\n    getComponents(): ComponentOption[];\r\n    /**\r\n     * 清除当前的组件\r\n     */\r\n    private clearComponents;\r\n    /**\r\n     * region filter 比较特殊的渲染时机\r\n     * @param doWhat\r\n     */\r\n    private onAfterRender;\r\n    private createAnnotation;\r\n    annotation(option: any): void;\r\n    /**\r\n     * 创建 Arc\r\n     * @param option\r\n     * @returns AnnotationController\r\n     */\r\n    arc(option: ArcOption): this;\r\n    /**\r\n     * 创建 image\r\n     * @param option\r\n     * @returns AnnotationController\r\n     */\r\n    image(option: ImageOption): this;\r\n    /**\r\n     * 创建 Line\r\n     * @param option\r\n     * @returns AnnotationController\r\n     */\r\n    line(option: LineOption): this;\r\n    /**\r\n     * 创建 Region\r\n     * @param option\r\n     * @returns AnnotationController\r\n     */\r\n    region(option: RegionOption): this;\r\n    /**\r\n     * 创建 Text\r\n     * @param option\r\n     * @returns AnnotationController\r\n     */\r\n    text(option: TextOption): this;\r\n    /**\r\n     * 创建 DataMarker\r\n     * @param option\r\n     * @returns AnnotationController\r\n     */\r\n    dataMarker(option: DataMarkerOption): this;\r\n    /**\r\n     * 创建 DataRegion\r\n     * @param option\r\n     * @returns AnnotationController\r\n     */\r\n    dataRegion(option: DataRegionOption): void;\r\n    /**\r\n     * 创建 RegionFilter\r\n     * @param option\r\n     * @returns AnnotationController\r\n     */\r\n    regionFilter(option: RegionFilterOption): void;\r\n    /**\r\n     * 创建 ShapeAnnotation\r\n     * @param option\r\n     */\r\n    shape(option: ShapeAnnotationOption): void;\r\n    /**\r\n     * 创建 HtmlAnnotation\r\n     * @param option\r\n     */\r\n    html(option: HtmlAnnotationOption): void;\r\n    /**\r\n     * parse the point position to [x, y]\r\n     * @param p Position\r\n     * @returns { x, y }\r\n         */\r\n     private parsePosition;\r\n     /**\r\n      * parse all the points between start and end\r\n      * @param start\r\n      * @param end\r\n      * @return Point[]\r\n      */\r\n     private getRegionPoints;\r\n     /**\r\n      * parse percent position\r\n      * @param position\r\n      */\r\n     private parsePercentPosition;\r\n     /**\r\n      * get coordinate bbox\r\n      */\r\n     private getCoordinateBBox;\r\n     /**\r\n      * get annotation component config by different type\r\n      * @param type\r\n      * @param option 用户的配置\r\n      * @param theme\r\n      */\r\n     private getAnnotationCfg;\r\n     /**\r\n      * is annotation render on top\r\n      * @param option\r\n      * @return whethe on top\r\n      */\r\n     private isTop;\r\n     /**\r\n      * get the container by option.top\r\n      * default is on top\r\n      * @param option\r\n      * @returns the container\r\n      */\r\n     private getComponentContainer;\r\n     private getAnnotationTheme;\r\n     /**\r\n      * 创建或者更新 annotation\r\n      * @param option\r\n      */\r\n     private updateOrCreate;\r\n     /**\r\n      * 更新缓存，以及销毁组件\r\n      * @param updated 更新或者创建的组件\r\n      */\r\n     private syncCache;\r\n     /**\r\n      * 获得缓存组件的 key\r\n      * @param option\r\n      */\r\n     private getCacheKey;\r\n    }\r\n\r\n    /**\r\n     * @title Annotation 定义的通用属性，chart.annotation().line({})\r\n     */\r\n    declare interface AnnotationBaseOption {\r\n        /**\r\n         * @title 类型\r\n         */\r\n        readonly type?: string;\r\n        /**\r\n         * @title 是否顶层\r\n         * @description 指定 annotation 是否绘制在 canvas 最上层，默认为 false, 即绘制在最下层\r\n         */\r\n        readonly top?: boolean;\r\n        /**\r\n         * @title 是否进行动画\r\n         */\r\n        readonly animate?: boolean;\r\n        /**\r\n         * @title 动画参数配置\r\n         * @description 当且仅当 `animate` 属性为 true，即动画开启时生效。\r\n         */\r\n        readonly animateOption?: ComponentAnimateOption;\r\n        /**\r\n         * @title x 方向的偏移量\r\n         */\r\n        readonly offsetX?: number;\r\n        /**\r\n         * @title y 方向的偏移量\r\n         */\r\n        readonly offsetY?: number;\r\n    }\r\n\r\n    /**\r\n     * @title Annotation 位置相关属性的类型定义\r\n     */\r\n    declare type AnnotationPosition = [number | string, number | string] | Record<string, number | string> | AnnotationPositionCallback;\r\n\r\n    /**\r\n     * @title Annotation position 回调函数\r\n     */\r\n    declare type AnnotationPositionCallback = (xScales: Scale[] | Record<string, Scale>, yScales: Scale[] | Record<string, Scale>) => [number | string, number | string];\r\n\r\n    /**\r\n     * @title 使用 Arc Annotation 组件的配置定义\r\n     */\r\n    declare type ArcOption = RegionPositionBaseOption;\r\n\r\n    /**\r\n     * WAI-ARIA 无障碍标签配置\r\n     */\r\n    declare type AriaOption = false | {\r\n        readonly label: string;\r\n    };\r\n\r\n    /**\r\n     * @title 图形属性配置项定义，如 geometry.position({})\r\n     */\r\n    declare interface AttributeOption {\r\n        /**\r\n         * @title 映射的属性字段。\r\n         */\r\n        fields?: string[];\r\n        /**\r\n         * @title 回调函数。\r\n         */\r\n        callback?: (...args: any[]) => any;\r\n        /**\r\n         * @title 指定常量映射规则。\r\n         */\r\n        values?: any[];\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * G2 Axis controller, will:\r\n     *  - create component\r\n     *    - axis\r\n     *    - grid\r\n     *  - life circle\r\n     */\r\n    declare class Axis extends Controller<Option_2> {\r\n        /** the draw group of axis */\r\n        private axisContainer;\r\n        private axisForeContainer;\r\n        private gridContainer;\r\n        private gridForeContainer;\r\n        /** 使用 object 存储组件 */\r\n        private cache;\r\n        constructor(view: View);\r\n        get name(): string;\r\n        init(): void;\r\n        render(): void;\r\n        /**\r\n         * 更新组件布局，位置大小\r\n         */\r\n        layout(): void;\r\n        /**\r\n         * 更新 axis 组件\r\n         */\r\n        update(): void;\r\n        clear(): void;\r\n        destroy(): void;\r\n        /**\r\n         * @override\r\n         */\r\n        getComponents(): ComponentOption[];\r\n        /**\r\n         * 更新 x axis\r\n         * @param updatedCache\r\n         */\r\n        private updateXAxes;\r\n        private updateYAxes;\r\n        /**\r\n         * 创建 line axis\r\n         * @param scale\r\n         * @param option\r\n         * @param layer\r\n         * @param direction\r\n         * @param dim\r\n         */\r\n        private createLineAxis;\r\n        private createLineGrid;\r\n        private createCircleAxis;\r\n        private createCircleGrid;\r\n        /**\r\n         * generate line axis cfg\r\n         * @param scale\r\n         * @param axisOption\r\n         * @param direction\r\n         * @return line axis cfg\r\n         */\r\n        private getLineAxisCfg;\r\n        /**\r\n         * generate line grid cfg\r\n         * @param scale\r\n         * @param axisOption\r\n         * @param direction\r\n         * @param dim\r\n         * @return line grid cfg\r\n         */\r\n        private getLineGridCfg;\r\n        /**\r\n         * generate circle axis cfg\r\n         * @param scale\r\n         * @param axisOption\r\n         * @param direction\r\n         * @return circle axis cfg\r\n         */\r\n        private getCircleAxisCfg;\r\n        /**\r\n         * generate circle grid cfg\r\n         * @param scale\r\n         * @param axisOption\r\n         * @param direction\r\n         * @return circle grid cfg\r\n         */\r\n        private getCircleGridCfg;\r\n        private getId;\r\n        private getAnimateCfg;\r\n    }\r\n\r\n    /**\r\n     * @title 坐标轴配置属性，chart.axis()\r\n     */\r\n    declare interface AxisCfg {\r\n        /**\r\n         * @title 是否渲染在画布顶层\r\n         * @description 防止部分图形中，需要将 axis 显示在图形上面，避免被图形遮挡\r\n         */\r\n        top?: boolean;\r\n        /**\r\n         * @title 坐标轴的位置\r\n         * @description 适用于直角坐标系，设置坐标轴的位置。\r\n         */\r\n        position?: 'top' | 'bottom' | 'right' | 'left';\r\n        /**\r\n         * @title 轴线\r\n         * @description\r\n         * 坐标轴线的配置项，null 表示不展示。\r\n         * 属性结构如下：\r\n         *\r\n         * ```ts\r\n         * {\r\n         *   style?: ShapeAttrs; // 坐标轴线的样式配置项\r\n         * }\r\n         * ```\r\n         *\r\n         * @link https://github.com/antvis/component/blob/81890719a431b3f9088e0c31c4d5d382ef0089df/src/types.ts#L91|AxisLineCfg\r\n         */\r\n        line?: AxisLineCfg | null;\r\n        /**\r\n         * @title 刻度线线\r\n         * @description\r\n         * 坐标轴刻度线线的配置项，null 表示不展示。\r\n         * 属性结构如下：\r\n         *\r\n         * ```ts\r\n         * {\r\n         *   style?: ShapeAttrs; // 坐标轴刻度线的样式配置项\r\n         *   alignTick?: boolean; // 是否同 tick 对齐\r\n         *   length?: number;  // 长度\r\n         * }\r\n         * ```\r\n         *\r\n         * @link https://github.com/antvis/component/blob/81890719a431b3f9088e0c31c4d5d382ef0089df/src/types.ts#L103|AxisTickLineCfg\r\n         */\r\n        tickLine?: AxisTickLineCfg | null;\r\n        /**\r\n         * @title 子刻度线\r\n         * @description\r\n         * 坐标轴子刻度线的配置项，null 表示不展示。\r\n         * 属性结构如下：\r\n         *\r\n         * ```ts\r\n         * {\r\n         *   style?: ShapeAttrs; // 坐标轴刻度线的样式配置项\r\n         *   count?: number; // 子刻度个数\r\n         *   length?: number; // 子刻度线长度\r\n         * }\r\n         * ```\r\n         *\r\n         * @link https://github.com/antvis/component/blob/81890719a431b3f9088e0c31c4d5d382ef0089df/src/types.ts#L169|AxisSubTickLineCfg\r\n         */\r\n        subTickLine?: AxisSubTickLineCfg | null;\r\n        /**\r\n         * @title 标题\r\n         * @description\r\n         * 标题的配置项，null 表示不展示。\r\n         * 属性结构如下：\r\n         *\r\n         * ```ts\r\n         * {\r\n         *   offset?: number; // 标题距离坐标轴的距离\r\n         *   style?: ShapeAttrs; // 标题文本配置项\r\n         *   autoRotate?: boolean; // 是否自动旋转\r\n         * }\r\n         * ```\r\n         *\r\n         * @link https://github.com/antvis/component/blob/81890719a431b3f9088e0c31c4d5d382ef0089df/src/types.ts#L191|AxisTitleCfg\r\n         */\r\n        title?: AxisTitleCfg | null;\r\n        /**\r\n         * @title 文本标签\r\n         * @description\r\n         * 文本标签的配置项，null 表示不展示。\r\n         * 属性结构如下：\r\n         *\r\n         * ```ts\r\n         * {\r\n         *   // 坐标轴文本的样式\r\n         *   style?: ShapeAttrs;\r\n         *   // label 的偏移量\r\n         *   offset?: number;\r\n         *   // 文本旋转角度\r\n         *   rotate?: number;\r\n         *   // 格式化函数\r\n         *   formatter?: (text: string, item: ListItem, index: number) => any;\r\n         *   // 是否自动旋转，默认 false\r\n         *   autoRotate?: boolean | (isVertical: boolean, labelGroup: IGroup, limitLength?: number) => boolean; | string;\r\n         *   // 是否自动隐藏，默认 true\r\n         *   autoHide?: boolean | (isVertical: boolean, labelGroup: IGroup, limitLength?: number) => boolean; | string;\r\n         *   // 是否自动省略，默认 false\r\n         *   autoEllipsis?: boolean | (isVertical: boolean, labelGroup: IGroup, limitLength?: number) => boolean; | string;\r\n         * }\r\n         * ```\r\n         *\r\n         * @link https://github.com/antvis/component/blob/81890719a431b3f9088e0c31c4d5d382ef0089df/src/types.ts#L127|AxisLabelCfg\r\n         */\r\n        label?: AxisLabelCfg | null;\r\n        /**\r\n         * @title 网格线\r\n         * @description 坐标轴网格线的配置项，null 表示不展示。\r\n         */\r\n        grid?: AxisGridCfg | null;\r\n        /**\r\n         * @title 动画\r\n         * @default true\r\n         */\r\n        animate?: boolean;\r\n        /**\r\n         * @title 动画参数\r\n         */\r\n        animateOption?: ComponentAnimateOption;\r\n        /**\r\n         * @title 坐标轴 label 的方向\r\n         * @description 标记坐标轴 label 的方向，左侧为 1，右侧为 -1。\r\n         */\r\n        verticalFactor?: number;\r\n        /**\r\n         * @title 坐标轴垂直方向的最大限制长度\r\n         * @description\r\n         * 配置坐标轴垂直方向的最大限制长度，对文本自适应有很大影响。\r\n         * 1. 可以直接设置像素值，如 100；\r\n         * 2. 也可设置绝对值，如 0.2，如果是 x 轴，则相对于图表的高度，如果是 y 轴，则相对于图表的宽度\r\n         *\r\n         * 在 G2 中，x 轴的文本默认最大高度为图表高度的 1/2，y 轴的文本默认最大长度为图表宽度的 1/3\r\n         */\r\n        verticalLimitLength?: number;\r\n    }\r\n\r\n    /**\r\n     * @title 坐标轴网格线的配置属性\r\n     */\r\n    declare interface AxisGridCfg {\r\n        /**\r\n         * @title 线的样式\r\n         * @description\r\n         * 属性结构如下：\r\n         *\r\n         * ```ts\r\n         * {\r\n         *   type?: string; // 栅格线的类型，'line' 或者 'circle'\r\n         *   style?: ShapeAttrs; // 栅格线的样式配置项\r\n         * }\r\n         * ```\r\n         *\r\n         * @link https://github.com/antvis/component/blob/81890719a431b3f9088e0c31c4d5d382ef0089df/src/types.ts#L407|GridLineCfg\r\n         */\r\n        line?: GridLineCfg;\r\n        /**\r\n         * @title 两个栅格线间的填充色。\r\n         */\r\n        alternateColor?: string | string[];\r\n        /**\r\n         * @title 是否关闭\r\n         * @description 对于 circle 是否关闭 grid。\r\n         */\r\n        closed?: boolean;\r\n        /**\r\n         * @title 是否同刻度线对齐\r\n         * @description 如果值为 false，则会显示在两个刻度中间。\r\n         * @see ![image](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*YX6fS4GTTvMAAAAAAAAAAABkARQnAQ)\r\n         */\r\n        alignTick?: boolean;\r\n    }\r\n\r\n    /**\r\n     * @title chart.axis() 参数类型\r\n     */\r\n    declare type AxisOption = AxisCfg | boolean;\r\n\r\n    /**\r\n     * G2 Chart、View、Geometry 以及 Element 等的基类，提供事件以及一些通用的方法。\r\n     */\r\n    declare class Base extends EE {\r\n        /** 是否可见 */\r\n        visible: boolean;\r\n        /** 标识对象是否已销毁 */\r\n        destroyed: boolean;\r\n        constructor(cfg: BaseCfg);\r\n        /**\r\n         * 显示。\r\n         */\r\n        show(): void;\r\n        /**\r\n         * 隐藏。\r\n         */\r\n        hide(): void;\r\n        /**\r\n         * 销毁。\r\n         */\r\n        destroy(): void;\r\n        /**\r\n         * 显示或者隐藏。\r\n         * @param visible\r\n         * @returns\r\n         */\r\n        changeVisible(visible: boolean): void;\r\n    }\r\n\r\n    declare interface BaseCfg {\r\n        visible?: boolean;\r\n    }\r\n\r\n    /**\r\n     * 用于包围盒计算。\r\n     */\r\n    declare class BBox_2 {\r\n        /** x 轴坐标系 */\r\n        x: number;\r\n        /** y 轴坐标系 */\r\n        y: number;\r\n        /** 包围盒高度 */\r\n        height: number;\r\n        /** 包围盒宽度 */\r\n        width: number;\r\n        static fromRange(minX: number, minY: number, maxX: number, maxY: number): BBox_2;\r\n        static fromObject(bbox: BBox): BBox_2;\r\n        constructor(x?: number, y?: number, width?: number, height?: number);\r\n        get minX(): number;\r\n        get maxX(): number;\r\n        get minY(): number;\r\n        get maxY(): number;\r\n        get tl(): Point;\r\n        get tr(): Point;\r\n        get bl(): Point;\r\n        get br(): Point;\r\n        get top(): Point;\r\n        get right(): Point;\r\n        get bottom(): Point;\r\n        get left(): Point;\r\n        /**\r\n         * 包围盒是否相等\r\n         * @param {BBox} bbox 包围盒\r\n         * @returns      包围盒是否相等\r\n         */\r\n        isEqual(bbox: BBox_2): boolean;\r\n        /**\r\n         * 是否包含了另一个包围盒\r\n         * @param child\r\n         */\r\n        contains(child: BBox_2): boolean;\r\n        /**\r\n         * 克隆包围盒\r\n         * @returns 包围盒\r\n         */\r\n        clone(): BBox_2;\r\n        /**\r\n         * 取并集\r\n         * @param subBBox\r\n         */\r\n        add(...subBBox: BBox_2[]): BBox_2;\r\n        /**\r\n         * 取交集\r\n         * @param subBBox\r\n         */\r\n        merge(...subBBox: BBox_2[]): BBox_2;\r\n        /**\r\n         * bbox 剪裁\r\n         * @param subBBox\r\n         * @param direction\r\n         */\r\n        cut(subBBox: BBox_2, direction: DIRECTION): BBox_2;\r\n        /**\r\n         * 收缩形成新的\r\n         * @param gap\r\n         */\r\n        shrink(gap: Padding): BBox_2;\r\n        /**\r\n         * 扩张形成新的\r\n         * @param gap\r\n         */\r\n        expand(gap: Padding): BBox_2;\r\n        /**\r\n         * get the gap of two bbox, if not exceed, then 0\r\n         * @param bbox\r\n         * @returns [top, right, bottom, left]\r\n         */\r\n        exceed(bbox: BBox_2): Padding;\r\n        /**\r\n         * 是否碰撞\r\n         * @param bbox\r\n         */\r\n        collide(bbox: BBox_2): boolean;\r\n        /**\r\n         * 获取包围盒大小\r\n         * @returns 包围盒大小\r\n         */\r\n        size(): number;\r\n        /**\r\n         * 点是否在 bbox 中\r\n         * @param p\r\n         */\r\n        isPointIn(p: Point): boolean;\r\n    }\r\n\r\n    /**\r\n     * Chart 类，是使用 G2 进行绘图的入口。\r\n     */\r\n    export declare class Chart extends View {\r\n        /** Chart 的 DOM 容器 */\r\n        ele: HTMLElement;\r\n        /** 图表宽度 */\r\n        width: number;\r\n        /** 图表高度 */\r\n        height: number;\r\n        /** 是否开启局部刷新 */\r\n        localRefresh: boolean;\r\n        /** 是否自适应 DOM 容器宽高，默认为 false，需要用户手动指定宽高 */\r\n        autoFit: boolean;\r\n        /** 图表渲染引擎 */\r\n        renderer: 'canvas' | 'svg';\r\n        private wrapperElement;\r\n        constructor(props: ChartCfg);\r\n        private initDefaultInteractions;\r\n        /**\r\n         * 设置 WAI-ARIA 无障碍标签。如何根据图形语法自动生成 arial 内容？\r\n         * @param ariaOption\r\n         */\r\n        aria(ariaOption: AriaOption): void;\r\n        /**\r\n         * 改变图表大小，同时重新渲染。\r\n         * @param width 图表宽度\r\n         * @param height 图表高度\r\n         * @returns\r\n         */\r\n        changeSize(width: number, height: number): this;\r\n        /**\r\n         * 清空图表，同时清除掉 aria 配置\r\n         */\r\n        clear(): void;\r\n        /**\r\n         * 销毁图表，同时解绑事件，销毁创建的 G.Canvas 实例。\r\n         * @returns void\r\n         */\r\n        destroy(): void;\r\n        /**\r\n         * 显示或隐藏图表\r\n         * @param visible 是否可见，true 表示显示，false 表示隐藏\r\n         * @returns\r\n         */\r\n        changeVisible(visible: boolean): this;\r\n        /**\r\n         * 自动根据容器大小 resize 画布\r\n         */\r\n        forceFit(): void;\r\n        private updateCanvasStyle;\r\n        private bindAutoFit;\r\n        private unbindAutoFit;\r\n        /**\r\n         * when container size changed, change chart size props, and re-render.\r\n         */\r\n        private onResize;\r\n    }\r\n\r\n    /**\r\n     * @title Chart 构造方法的入参\r\n     */\r\n    declare interface ChartCfg extends Omit<ViewCfg, 'parent' | 'canvas' | 'foregroundGroup' | 'middleGroup' | 'backgroundGroup' | 'region'> {\r\n        /**\r\n         * @title 指定 chart 绘制的 DOM，可以传入 DOM id，也可以直接传入 dom 实例。\r\n         */\r\n        readonly container: string | HTMLElement;\r\n        /**\r\n         * @title 图表宽度。\r\n         */\r\n        readonly width?: number;\r\n        /**\r\n         * @title 图表高度。\r\n         */\r\n        readonly height?: number;\r\n        /**\r\n         * @title 否自适应容器宽高\r\n         * @description\r\n         * 图表是否自适应容器宽高，默认为 false，用户需要手动设置 width 和 height。当 `autoFit: true` 时，\r\n         * 会自动取图表容器的宽高，如果用户设置了 height，那么会以用户设置的 height 为准。\r\n         * @default false\r\n         */\r\n        readonly autoFit?: boolean;\r\n        /**\r\n         * @title 渲染引擎\r\n         * @default \"canvas\"\r\n         */\r\n        readonly renderer?: Renderer;\r\n        /**\r\n         * @title 像素比\r\n         * @description 设置设备像素比，默认取浏览器的值 `window.devicePixelRatio`。\r\n         */\r\n        readonly pixelRatio?: number;\r\n        /**\r\n         * @title 是否开启局部刷新\r\n         * @default true\r\n         */\r\n        readonly localRefresh?: boolean;\r\n        /**\r\n         * @title 是否支持 CSS transform\r\n         * @description 开启后图表的交互以及事件将在页面设置了 css transform 属性时生效，默认关闭。\r\n         * @default false\r\n         */\r\n        readonly supportCSSTransform?: boolean;\r\n        /**\r\n         * @title 配置图表默认交互，仅支持字符串形式。\r\n         */\r\n        readonly defaultInteractions?: string[];\r\n    }\r\n\r\n    /**\r\n     * @title circle 分面类型配置\r\n     */\r\n    declare interface CircleCfg extends FacetCfg<CircleData> {\r\n        /**\r\n         * @title 分面标题配置。\r\n         */\r\n        readonly title?: FacetTitle;\r\n    }\r\n\r\n    declare type CircleData = FacetData;\r\n\r\n    /**\r\n     * @title geometry.color() 图形属性回调函数定义\r\n     */\r\n    declare type ColorAttrCallback = (...args: any[]) => string;\r\n\r\n    /**\r\n     * 组件的类型，可能会影响到布局算法\r\n     */\r\n    declare enum COMPONENT_TYPE {\r\n        /** axis 组件 */\r\n        AXIS = \"axis\",\r\n        /** grid 组件 */\r\n        GRID = \"grid\",\r\n        /** legend 组件 */\r\n        LEGEND = \"legend\",\r\n        /** tooltip 组件 */\r\n        TOOLTIP = \"tooltip\",\r\n        /** annotation 组件 */\r\n        ANNOTATION = \"annotation\",\r\n        /** 缩略轴组件 */\r\n        SLIDER = \"slider\",\r\n        /** 滚动条组件 */\r\n        SCROLLBAR = \"scrollbar\",\r\n        /** 其他组件，自定义组件 */\r\n        OTHER = \"other\"\r\n    }\r\n\r\n    /**\r\n     * @title 目前组件动画允许的参数配置\r\n     */\r\n    declare interface ComponentAnimateCfg {\r\n        /**\r\n         * @title 动画执行时间\r\n         */\r\n        readonly duration?: number;\r\n        /**\r\n         * @title 动画缓动函数\r\n         */\r\n        readonly easing?: string;\r\n        /**\r\n         * @title 动画延迟时间\r\n         */\r\n        readonly delay?: number;\r\n    }\r\n\r\n    /**\r\n     * @title 组件各个动画类型配置\r\n     */\r\n    declare interface ComponentAnimateOption {\r\n        /**\r\n         * @title 初入场动画配置\r\n         */\r\n        appear?: ComponentAnimateCfg;\r\n        /**\r\n         * @title 更新动画配置\r\n         */\r\n        update?: ComponentAnimateCfg;\r\n        /**\r\n         * @title 更新后新入场的动画配置\r\n         */\r\n        enter?: ComponentAnimateCfg;\r\n        /**\r\n         * @title 离场动画配置\r\n         */\r\n        leave?: ComponentAnimateCfg;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * 组件及布局的信息\r\n     */\r\n    declare interface ComponentOption {\r\n        readonly id?: string;\r\n        readonly component: GroupComponent | HtmlComponent;\r\n        readonly layer: LAYER;\r\n        direction: DIRECTION;\r\n        readonly type: COMPONENT_TYPE;\r\n        readonly extra?: any;\r\n    }\r\n\r\n    declare interface Condition {\r\n        readonly field: string;\r\n        readonly value: any;\r\n        readonly values: any[];\r\n    }\r\n\r\n    /**\r\n     * Component Controller 规范需要定义的基类\r\n     * 1. 规范的 option 输入\r\n     * 2. 统一的信息获取 API\r\n     * 3. 明确定义的组件事件（名称、数据）\r\n     */\r\n    declare abstract class Controller<O = unknown> {\r\n        /** 是否可见 */\r\n        visible: boolean;\r\n        protected view: View;\r\n        /** option 配置，不同组件有自己不同的配置结构 */\r\n        protected option: O;\r\n        /** 所有的 component */\r\n        protected components: ComponentOption[];\r\n        constructor(view: View);\r\n        abstract get name(): string;\r\n        /**\r\n         * init the component\r\n         */\r\n        abstract init(): any;\r\n        /**\r\n         * render the components\r\n         */\r\n        abstract render(): any;\r\n        /**\r\n         * update the components\r\n         */\r\n        /**\r\n         * do layout\r\n         */\r\n        abstract layout(): any;\r\n        /**\r\n         * 组件的更新逻辑\r\n         *  - 根据字段为标识，为每一个组件生成一个 id，放到 option 中\r\n         *  - 更新的时候按照 id 去做 diff，然后对同的做处理\r\n         *  - 创建增加的\r\n         *  - 更新已有的\r\n         *  - 销毁删除的\r\n         */\r\n        abstract update(): any;\r\n        /**\r\n         * clear\r\n         * @param includeOption 是否清空 option 配置项（used in annotation）\r\n         */\r\n        clear(includeOption?: boolean): void;\r\n        /**\r\n         * destroy the component\r\n         */\r\n        destroy(): void;\r\n        /**\r\n         * get all components\r\n         * @returns components array\r\n         */\r\n        getComponents(): ComponentOption[];\r\n        /**\r\n         * change visibility of component\r\n         * @param visible\r\n         */\r\n        changeVisible(visible: boolean): void;\r\n    }\r\n\r\n    /**\r\n     * @title 坐标系支持的 action 配置\r\n     */\r\n    declare type CoordinateActions = CoordinateRotate | CoordinateReflect | CoordinateScale | CoordinateTranspose;\r\n\r\n    /**\r\n     * @title 极坐标系支持的配置属性\r\n     */\r\n    declare interface CoordinateCfg {\r\n        /**\r\n         * @title 起始弧度\r\n         * @description 用于极坐标，配置起始弧度。\r\n         */\r\n        startAngle?: number;\r\n        /**\r\n         * @title 结束弧度\r\n         * @description 用于极坐标，配置结束弧度。\r\n         */\r\n        endAngle?: number;\r\n        /**\r\n         * @title 半径\r\n         * @description 用于极坐标，配置极坐标半径，0 - 1 范围的数值。\r\n         */\r\n        radius?: number;\r\n        /**\r\n         * @title 内半径\r\n         * @description 用于极坐标，极坐标内半径，0 -1 范围的数值。\r\n         */\r\n        innerRadius?: number;\r\n    }\r\n\r\n    /**\r\n     * coordinate controller，职责：\r\n     * 1. 创建实例\r\n     * 2. 暂存配置\r\n     */\r\n    declare class CoordinateController {\r\n        private option;\r\n        private coordinate;\r\n        constructor(option?: CoordinateOption);\r\n        /**\r\n         * 更新配置\r\n         * @param option\r\n         */\r\n        update(option: CoordinateOption): this;\r\n        /**\r\n         * 是否存在某一个 action\r\n         * @param actionName\r\n         */\r\n        hasAction(actionName: string): boolean;\r\n        /**\r\n         * 创建坐标系对象\r\n         * @param start 起始位置\r\n         * @param end   结束位置\r\n         * @return 坐标系实例\r\n         */\r\n        create(start: Point_2, end: Point_2): Coordinate;\r\n        /**\r\n         * 更新坐标系对象\r\n         * @param start 起始位置\r\n         * @param end   结束位置\r\n         * @return 坐标系实例\r\n         */\r\n        adjust(start: Point_2, end: Point_2): Coordinate;\r\n        /**\r\n         * 旋转弧度\r\n         * @param angle\r\n         */\r\n        rotate(angle: number): this;\r\n        /**\r\n         * 镜像\r\n         * @param dim\r\n         */\r\n        reflect(dim: 'x' | 'y'): this;\r\n        /**\r\n         * scale\r\n         * @param sx\r\n         * @param sy\r\n         */\r\n        scale(sx: number, sy: number): this;\r\n        /**\r\n         * 对角变换\r\n         */\r\n        transpose(): this;\r\n        /**\r\n         * 获取配置\r\n         */\r\n        getOption(): CoordinateOption;\r\n        /**\r\n         * 获得 coordinate 实例\r\n         */\r\n        getCoordinate(): Coordinate;\r\n        /**\r\n         * 包装配置的默认值\r\n         * @param option\r\n         */\r\n        private wrapperOption;\r\n        /**\r\n         * coordinate 实例执行 actions\r\n         * @params includeActions 如果没有指定，则执行全部，否则，执行指定的 action\r\n         */\r\n        private execActions;\r\n    }\r\n\r\n    /**\r\n     * @title 坐标系配置\r\n     */\r\n    declare interface CoordinateOption {\r\n        /**\r\n         * @title 坐标系类型\r\n         */\r\n        type?: 'polar' | 'theta' | 'rect' | 'cartesian' | 'helix';\r\n        /**\r\n         * @title 坐标系配置项，目前常用于极坐标。\r\n         */\r\n        cfg?: CoordinateCfg;\r\n        /**\r\n         * @title 坐标系变换\r\n         * @description\r\n         * 1. rotate 表示旋转，使用弧度制。\r\n         * 2. scale 表示沿着 x 和 y 方向的缩放比率。\r\n         * 3. reflect 表示沿 x 方向镜像或者沿 y 轴方向映射。\r\n         * 4. transpose 表示 x，y 轴置换。\r\n         */\r\n        actions?: CoordinateActions[];\r\n    }\r\n\r\n    declare type CoordinateReflect = ['reflect', 'x' | 'y'];\r\n\r\n    declare type CoordinateRotate = ['rotate', number];\r\n\r\n    declare type CoordinateScale = ['scale', number, number];\r\n\r\n    declare type CoordinateTranspose = ['transpose'];\r\n\r\n    /**\r\n     * @title geometry.custom() custom 自定义的配置，可以传入任何数据\r\n     */\r\n    declare type CustomOption = any;\r\n\r\n    declare type Data = Datum[];\r\n\r\n    /**\r\n     * @title 使用 DataMarker Annotation 组件的配置定义\r\n     */\r\n    declare interface DataMarkerOption extends PointPositionBaseOption {\r\n        /**\r\n         * @title point 设置\r\n         */\r\n        readonly point?: null | {\r\n            style?: ShapeAttrs;\r\n        };\r\n        /**\r\n         * @title line 设置\r\n         */\r\n        readonly line?: null | {\r\n            style?: ShapeAttrs;\r\n            length?: number;\r\n        };\r\n        /**\r\n         * @title text 设置\r\n         */\r\n        readonly text: null | EnhancedTextCfg;\r\n        /**\r\n         * @title 文本超出绘制区域时，是否自动调节文本方向，默认为 true\r\n         */\r\n        readonly autoAdjust?: boolean;\r\n        /**\r\n         * @title 朝向，默认为 upward，可选值为 'upward' 或者 'downward'\r\n         */\r\n        readonly direction?: 'upward' | 'downward';\r\n    }\r\n\r\n    /**\r\n     * @title 使用 DataRegion Annotation 组件的配置定义\r\n     */\r\n    declare interface DataRegionOption extends RegionPositionBaseOption {\r\n        /**\r\n         * @title line长度，default为 0\r\n         */\r\n        readonly lineLength?: number;\r\n        /**\r\n         * @title 标注区间的配置\r\n         */\r\n        readonly region?: null | {\r\n            style?: ShapeAttrs;\r\n        };\r\n        /**\r\n         * @title 文本的配置\r\n         */\r\n        readonly text?: null | EnhancedTextCfg;\r\n    }\r\n\r\n    /**\r\n     * @title 数据的定义\r\n     */\r\n    declare type Datum = Record<string, any>;\r\n\r\n    /**\r\n     * 组件在画布的布局方位 12 方位\r\n     */\r\n    declare enum DIRECTION {\r\n        TOP = \"top\",\r\n        TOP_LEFT = \"top-left\",\r\n        TOP_RIGHT = \"top-right\",\r\n        RIGHT = \"right\",\r\n        RIGHT_TOP = \"right-top\",\r\n        RIGHT_BOTTOM = \"right-bottom\",\r\n        LEFT = \"left\",\r\n        LEFT_TOP = \"left-top\",\r\n        LEFT_BOTTOM = \"left-bottom\",\r\n        BOTTOM = \"bottom\",\r\n        BOTTOM_LEFT = \"bottom-left\",\r\n        BOTTOM_RIGHT = \"bottom-right\",\r\n        RADIUS = \"radius\",\r\n        CIRCLE = \"circle\",\r\n        NONE = \"none\"\r\n    }\r\n\r\n    /**\r\n     * Element 图形元素。\r\n     * 定义：在 G2 中，我们会将数据通过图形语法映射成不同的图形，比如点图，数据集中的每条数据会对应一个点，柱状图每条数据对应一个柱子，线图则是一组数据对应一条折线，Element 即一条/一组数据对应的图形元素，它代表一条数据或者一个数据集，在图形层面，它可以是单个 Shape 也可以是多个 Shape，我们称之为图形元素。\r\n     */\r\n    declare class Element_2 extends Base {\r\n        /** 用于创建各种 shape 的工厂对象 */\r\n        shapeFactory: ShapeFactory;\r\n        /** shape 容器 */\r\n        container: IGroup;\r\n        /** element 索引 */\r\n        elementIndex: number;\r\n        /** 最后创建的图形对象 */\r\n        shape: IShape | IGroup;\r\n        /** shape 的动画配置 */\r\n        animate: AnimateOption | boolean;\r\n        /** element 对应的 Geometry 实例 */\r\n        geometry: Geometry;\r\n        /** 保存 shape 对应的 label */\r\n        labelShape: IGroup[];\r\n        /** 绘制的 shape 类型 */\r\n        private shapeType;\r\n        /** shape 绘制需要的数据 */\r\n        private model;\r\n        /** 原始数据 */\r\n        private data;\r\n        private states;\r\n        private statesStyle;\r\n        private offscreenGroup;\r\n        constructor(cfg: ElementCfg);\r\n        /**\r\n         * 绘制图形。\r\n         * @param model 绘制数据。\r\n         * @param isUpdate 可选，是否是更新发生后的绘制。\r\n         */\r\n        draw(model: ShapeInfo, isUpdate?: boolean): void;\r\n        /**\r\n         * 更新图形。\r\n         * @param model 更新的绘制数据。\r\n         */\r\n        update(model: ShapeInfo): void;\r\n        /**\r\n         * 销毁 element 实例。\r\n         */\r\n        destroy(): void;\r\n        /**\r\n         * 显示或者隐藏 element。\r\n         * @param visible 是否可见。\r\n         */\r\n        changeVisible(visible: boolean): void;\r\n        /**\r\n         * 设置 Element 的状态。\r\n         *\r\n         * 目前 Element 开放三种状态：\r\n         * 1. active\r\n         * 2. selected\r\n         * 3. inactive\r\n         *\r\n         * 这三种状态相互独立，可以进行叠加。\r\n         *\r\n         * 这三种状态的样式可在 [[Theme]] 主题中或者通过 `geometry.state()` 接口进行配置。\r\n         *\r\n         * ```ts\r\n         * // 激活 active 状态\r\n         * setState('active', true);\r\n         * ```\r\n         *\r\n         * @param stateName 状态名\r\n         * @param stateStatus 是否开启状态\r\n         */\r\n        setState(stateName: string, stateStatus: boolean): void;\r\n        /**\r\n         * 清空状量态，恢复至初始状态。\r\n         */\r\n        clearStates(): void;\r\n        /**\r\n         * 查询当前 Element 上是否已设置 `stateName` 对应的状态。\r\n         * @param stateName 状态名称。\r\n         * @returns true 表示存在，false 表示不存在。\r\n         */\r\n        hasState(stateName: string): boolean;\r\n        /**\r\n         * 获取当前 Element 上所有的状态。\r\n         * @returns 当前 Element 上所有的状态数组。\r\n         */\r\n        getStates(): string[];\r\n        /**\r\n         * 获取 Element 对应的原始数据。\r\n         * @returns 原始数据。\r\n         */\r\n        getData(): Datum;\r\n        /**\r\n         * 获取 Element 对应的图形绘制数据。\r\n         * @returns 图形绘制数据。\r\n         */\r\n        getModel(): ShapeInfo;\r\n        /**\r\n         * 返回 Element 元素整体的 bbox，包含文本及文本连线（有的话）。\r\n         * @returns 整体包围盒。\r\n         */\r\n        getBBox(): BBox;\r\n        private getStatesStyle;\r\n        private getStateStyle;\r\n        private getAnimateCfg;\r\n        private drawShape;\r\n        private getOffscreenGroup;\r\n        private setShapeInfo;\r\n        private syncShapeStyle;\r\n        private getShapeType;\r\n    }\r\n\r\n    /** Element 构造函数传入参数类型 */\r\n    declare interface ElementCfg {\r\n        /** 用于创建各种 shape 的工厂对象 */\r\n        shapeFactory: ShapeFactory;\r\n        /** shape 容器 */\r\n        container: IGroup;\r\n        /** element 的索引 */\r\n        elementIndex?: number;\r\n        /** 虚拟 group，用户可以不传入 */\r\n        offscreenGroup?: IGroup;\r\n        /** 是否可见 */\r\n        visible?: boolean;\r\n    }\r\n\r\n    declare type EventCallback = (event: LooseObject) => void;\r\n\r\n    /**\r\n     * todo: 事件名可穷举，后续需要补充\r\n     * 事件配置项\r\n     */\r\n    declare interface EventCfg {\r\n        [key: string]: EventCallback;\r\n    }\r\n\r\n    /**\r\n     * 事件 payload\r\n     */\r\n    declare type EventPayload = LooseObject & {\r\n        /**\r\n         * @title 触发事件的来源\r\n         */\r\n        source?: string;\r\n    };\r\n\r\n    /**\r\n     * facet 基类\r\n     *  - 定义生命周期，方便自定义 facet\r\n     *  - 提供基础的生命流程方法\r\n     *\r\n     * 生命周期：\r\n     *\r\n     * 初始化 init\r\n     * 1. 初始化容器\r\n     * 2. 数据分面，生成分面布局信息\r\n     *\r\n     * 渲染阶段 render\r\n     * 1. view 创建\r\n     * 2. title\r\n     * 3. axis\r\n     *\r\n     * 清除阶段 clear\r\n     * 1. 清除 view\r\n     *\r\n     * 销毁阶段 destroy\r\n     * 1. clear\r\n     * 2. 清除事件\r\n     * 3. 清除 group\r\n     */\r\n    declare abstract class Facet<C extends FacetCfg<FacetData> = FacetCfg<FacetData>, F extends FacetData = FacetData> {\r\n        /** 分面所在的 view */\r\n        view: View;\r\n        /** 分面容器 */\r\n        container: IGroup;\r\n        /** 是否销毁 */\r\n        destroyed: boolean;\r\n        /** 分面的配置项 */\r\n        protected cfg: C;\r\n        /** 分面之后的所有分面数据结构 */\r\n        protected facets: F[];\r\n        constructor(view: View, cfg: C);\r\n        /**\r\n         * 初始化过程\r\n         */\r\n        init(): void;\r\n        /**\r\n         * 渲染分面，由上层 view 调用。包括：\r\n         *  - 分面 view\r\n         *  - 轴\r\n         *  - title\r\n         *\r\n         *  子类可以复写，添加一些其他组件，比如滚动条等\r\n         */\r\n        render(): void;\r\n        /**\r\n         * 更新 facet\r\n         */\r\n        update(): void;\r\n        /**\r\n         * 清空，clear 之后如果还需要使用，需要重新调用 init 初始化过程\r\n         * 一般在数据有变更的时候调用，重新进行数据的分面逻辑\r\n         */\r\n        clear(): void;\r\n        /**\r\n         * 销毁\r\n         */\r\n        destroy(): void;\r\n        /**\r\n         * 根据 facet 生成 view，可以给上层自定义使用\r\n         * @param facet\r\n         */\r\n        protected facetToView(facet: F): View;\r\n        private createContainer;\r\n        /**\r\n         * 初始化 view\r\n         */\r\n        private renderViews;\r\n        /**\r\n         * 创建 分面 view\r\n         */\r\n        private createFacetViews;\r\n        /**\r\n         * 从 view 中清除 facetView\r\n         */\r\n        private clearFacetViews;\r\n        /**\r\n         * 解析 spacing\r\n         */\r\n        private parseSpacing;\r\n        /**\r\n         * 获取这个字段对应的所有值，数组\r\n         * @protected\r\n         * @param data 数据\r\n         * @param field 字段名\r\n         * @return 字段对应的值\r\n         */\r\n        protected getFieldValues(data: Datum[], field: string): string[];\r\n        /**\r\n         * 获得每个分面的 region，平分区域\r\n         * @param rows row 总数\r\n         * @param cols col 总数\r\n         * @param xIndex x 方向 index\r\n         * @param yIndex y 方向 index\r\n         */\r\n        protected getRegion(rows: number, cols: number, xIndex: number, yIndex: number): Region;\r\n        protected getDefaultCfg(): {\r\n            eachView: any;\r\n            showTitle: boolean;\r\n            spacing: number[];\r\n            padding: number;\r\n            fields: any[];\r\n        };\r\n        /**\r\n         * 默认的 title 样式，因为有的分面是 title，有的分面配置是 columnTitle、rowTitle\r\n         */\r\n        protected getDefaultTitleCfg(): {\r\n            style: {\r\n                fontSize: number;\r\n                fill: string;\r\n                fontFamily: any;\r\n            };\r\n        };\r\n        /**\r\n         * 处理 axis 的默认配置\r\n         * @param view\r\n         * @param facet\r\n         */\r\n        protected processAxis(view: View, facet: F): void;\r\n        /**\r\n         * 获取分面数据\r\n         * @param conditions\r\n         */\r\n        protected getFacetDataFilter(conditions: Condition[]): FacetDataFilter;\r\n        /**\r\n         * @override 开始处理 eachView\r\n         * @param view\r\n         * @param facet\r\n         */\r\n        protected abstract beforeEachView(view: View, facet: F): any;\r\n        /**\r\n         * @override 处理 eachView 之后\r\n         * @param view\r\n         * @param facet\r\n         */\r\n        protected abstract afterEachView(view: View, facet: F): any;\r\n        /**\r\n         * @override 生成分面数据，包含布局\r\n         * @param data\r\n         */\r\n        protected abstract generateFacets(data: Datum[]): F[];\r\n        /**\r\n         * 获取 x 轴的配置\r\n         * @param x\r\n         * @param axes\r\n         * @param option\r\n         * @param facet\r\n         */\r\n        protected abstract getXAxisOption(x: string, axes: any, option: AxisCfg, facet: F): object;\r\n        /**\r\n         * 获取 y 轴的配置\r\n         * @param y\r\n         * @param axes\r\n         * @param option\r\n         * @param facet\r\n         */\r\n        protected abstract getYAxisOption(y: string, axes: any, option: AxisCfg, facet: F): object;\r\n    }\r\n\r\n    /**\r\n     * 默认的基础配置\r\n     */\r\n    declare interface FacetCfg<D> {\r\n        /**\r\n         * @title 布局类型。\r\n         */\r\n        readonly type?: string;\r\n        /**\r\n         * @title view 创建回调。\r\n         */\r\n        readonly eachView: (innerView: View, facet?: D) => any;\r\n        /**\r\n         * @title 分面 view 之间的间隔， 百分比或像素值\r\n         */\r\n        readonly spacing?: [number | string, number | string];\r\n        /**\r\n         * @title facet view padding。\r\n         */\r\n        readonly padding?: ViewPadding;\r\n        /**\r\n         * @title 是否显示标题。\r\n         */\r\n        readonly showTitle?: boolean;\r\n        /**\r\n         * @title facet 数据划分维度。\r\n         */\r\n        readonly fields: string[];\r\n    }\r\n\r\n    /**\r\n     * facet object map\r\n     */\r\n    declare interface FacetCfgMap {\r\n        /**\r\n         * @title rect 类型分面配置\r\n         */\r\n        readonly rect: RectCfg;\r\n        /**\r\n         * @title mirror 类型分面配置\r\n         */\r\n        readonly mirror: MirrorCfg;\r\n        /**\r\n         * @title list 类型分面配置\r\n         */\r\n        readonly list: ListCfg;\r\n        /**\r\n         * @title matrix 类型分面配置\r\n         */\r\n        readonly matrix: MatrixCfg;\r\n        /**\r\n         * @title circle 类型分面配置\r\n         */\r\n        readonly circle: CircleCfg;\r\n        /**\r\n         * @title tree 类型分面配置\r\n         */\r\n        readonly tree: TreeCfg;\r\n    }\r\n\r\n    /**\r\n     * 分面数据\r\n     */\r\n    declare interface FacetData {\r\n        /**\r\n         * @title 分面类型。\r\n         */\r\n        readonly type: string;\r\n        /**\r\n         * @title 当前分面子 view 的数据。\r\n         */\r\n        readonly data: object[];\r\n        /**\r\n         * @title 当前分面子 view 的范围。\r\n         */\r\n        readonly region: Region;\r\n        /**\r\n         * @title 当前分面子 view 的 padding。\r\n         */\r\n        readonly padding?: number;\r\n        /**\r\n         * @title 当前 facet 对应生成的 view。\r\n         */\r\n        view?: View;\r\n        /**\r\n         * @title 分面行字段。\r\n         */\r\n        readonly rowField: string;\r\n        /**\r\n         * @title 分面列字段。\r\n         */\r\n        readonly columnField: string;\r\n        /**\r\n         * @title 当前行分面的枚举值。\r\n         */\r\n        readonly rowValue: string;\r\n        /**\r\n         * @title 当前列分面的枚举值。\r\n         */\r\n        readonly columnValue: string;\r\n        /**\r\n         * @title 当前行索引。\r\n         */\r\n        readonly rowIndex: number;\r\n        /**\r\n         * @title 当前列索引。\r\n         */\r\n        readonly columnIndex: number;\r\n        /**\r\n         * @title 当前行字段的枚举值长度。\r\n         */\r\n        readonly rowValuesLength: number;\r\n        /**\r\n         * @title 当前列字段的枚举值长度。\r\n         */\r\n        readonly columnValuesLength: number;\r\n    }\r\n\r\n    declare type FacetDataFilter = (data: Datum[]) => boolean;\r\n\r\n    /**\r\n     * Facet title 配置项\r\n     */\r\n    declare interface FacetTitle {\r\n        /**\r\n         * @title x 方向偏移。\r\n         */\r\n        readonly offsetX?: number;\r\n        /**\r\n         * @title y 方向偏移。\r\n         */\r\n        readonly offsetY?: number;\r\n        /**\r\n         * @title 文本样式。\r\n         */\r\n        readonly style?: object;\r\n        /**\r\n         * @title 格式化\r\n         */\r\n        readonly formatter?: (val: any) => any;\r\n    }\r\n\r\n    declare type FilterCondition = (value: any, datum: Datum, idx?: number) => boolean;\r\n\r\n    declare interface G2LegendTitleCfg extends LegendTitleCfg {\r\n        /**\r\n         * @title title 文本显示内容\r\n         */\r\n        text?: string;\r\n    }\r\n\r\n    /**\r\n     * Geometry 几何标记基类，主要负责数据到图形属性的映射以及绘制逻辑。\r\n     */\r\n    declare class Geometry<S extends ShapePoint = ShapePoint> extends Base {\r\n        /** Geometry 几何标记类型。 */\r\n        readonly type: string;\r\n        /** ShapeFactory 对应的类型。 */\r\n        readonly shapeType: string;\r\n        /** Coordinate 坐标系实例。 */\r\n        coordinate: Coordinate;\r\n        /** 用户绘制数据。 */\r\n        data: Data;\r\n        /** 图形绘制容器。 */\r\n        readonly container: IGroup;\r\n        /** label 绘制容器。 */\r\n        readonly labelsContainer: IGroup;\r\n        /** 是否对数据进行排序，默认为 false。  */\r\n        sortable: boolean;\r\n        /** 当前 Geometry 实例主题。  */\r\n        theme: LooseObject;\r\n        /** 存储 geometry 需要的 scales，需要外部传入。 */\r\n        scales: Record<string, Scale>;\r\n        /** scale 定义，需要外部传入。 */\r\n        scaleDefs: Record<string, ScaleOption>;\r\n        /** 画布区域，用于 label 布局。 */\r\n        canvasRegion: BBox;\r\n        /** Attribute map  */\r\n        attributes: Record<string, Attribute>;\r\n        /** Element map */\r\n        elements: Element_2[];\r\n        /**\r\n         * 存储处理后的数据，\r\n         * + init() 及 updateData() 逻辑后, 结构为 Data[]；\r\n         * + paint() 逻辑后，结构为 MappingDatum[][]。\r\n         */\r\n        dataArray: MappingDatum[][];\r\n        /** 存储 tooltip 配置信息。 */\r\n        tooltipOption: GeometryTooltipOption | boolean;\r\n        /** 存储 label 配置信息。 */\r\n        labelOption: LabelOption | false;\r\n        /** 状态量相关的配置项 */\r\n        stateOption: StateOption;\r\n        /** 使用 key-value 结构存储 Element，key 为每个 Element 实例对应的唯一 ID */\r\n        elementsMap: Record<string, Element_2>;\r\n        /** animate 配置项 */\r\n        animateOption: AnimateOption | boolean;\r\n        /** 图形属性映射配置 */\r\n        protected attributeOption: Record<string, AttributeOption>;\r\n        /** adjust 配置项 */\r\n        protected adjustOption: AdjustOption[];\r\n        /** style 配置项 */\r\n        protected styleOption: StyleOption;\r\n        /** custom 自定义的配置项 */\r\n        protected customOption: CustomOption;\r\n        /** 每个 Geometry 对应的 Shape 工厂实例，用于创建各个 Shape */\r\n        protected shapeFactory: ShapeFactory;\r\n        /** 存储上一次渲染时的 element 映射表，用于更新逻辑 */\r\n        protected lastElementsMap: Record<string, Element_2>;\r\n        /** 是否生成多个点来绘制图形。 */\r\n        protected generatePoints: boolean;\r\n        /** 存储发生图形属性映射前的数据 */\r\n        protected beforeMappingData: Data[];\r\n        /** 存储每个 shape 的默认 size，用于 Interval、Schema 几何标记 */\r\n        protected defaultSize: number;\r\n        private userTheme;\r\n        private adjusts;\r\n        private lastAttributeOption;\r\n        private idFields;\r\n        private geometryLabel;\r\n        /** 组间距 */\r\n        protected intervalPadding: number;\r\n        /** 组内间距 */\r\n        protected dodgePadding: number;\r\n        /** 柱状图最大宽度 */\r\n        protected maxColumnWidth: number;\r\n        /** 柱状图最小宽度 */\r\n        protected minColumnWidth: number;\r\n        /** 一般柱状图宽度占比 */\r\n        protected columnWidthRatio: number;\r\n        /** 玫瑰图占比 */\r\n        protected roseWidthRatio: number;\r\n        /** 多层饼图/环图占比 */\r\n        protected multiplePieWidthRatio: number;\r\n        /** elements 的 zIndex 默认按顺序提升，通过 zIndexReversed 可以反序，从而数据越前，层级越高 */\r\n        zIndexReversed?: boolean;\r\n        /** 是否需要对 zIndex 进行 sort。因为耗时长，由具体场景自行决定 */\r\n        sortZIndex?: boolean;\r\n        protected useDeferredLabel?: null | number;\r\n        /** 虚拟 Group，用于图形更新 */\r\n        private offscreenGroup;\r\n        private groupScales;\r\n        private hasSorted;\r\n        protected isCoordinateChanged: boolean;\r\n        /**\r\n         * 创建 Geometry 实例。\r\n         * @param cfg\r\n         */\r\n        constructor(cfg: GeometryCfg);\r\n        /**\r\n         * 配置 position 通道映射规则。\r\n         *\r\n         * @example\r\n         * ```typescript\r\n         * // 数据结构: [{ x: 'A', y: 10, color: 'red' }]\r\n         * geometry.position('x*y');\r\n         * geometry.position([ 'x', 'y' ]);\r\n         * geometry.position({\r\n         *   fields: [ 'x', 'y' ],\r\n         * });\r\n         * ```\r\n         *\r\n         * @param cfg 映射规则\r\n         * @returns\r\n         */\r\n        position(cfg: string | string[] | AttributeOption): Geometry;\r\n        /**\r\n         * 配置 color 通道映射规则。\r\n         *\r\n         * @example\r\n         * ```typescript\r\n         * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\r\n         * geometry.color({\r\n         *   fields: [ 'x' ],\r\n         *   values: [ '#1890ff', '#5AD8A6' ],\r\n         * });\r\n         * ```\r\n         *\r\n         * @param field 映射规则\r\n         * @returns\r\n         */\r\n        color(field: AttributeOption): Geometry;\r\n        /**\r\n         * @example\r\n         * ```typescript\r\n         * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\r\n         *\r\n         * // 使用 '#1890ff' 颜色渲染图形\r\n         * geometry.color('#1890ff');\r\n         *\r\n         * // 根据 x 字段的数据值进行颜色的映射，这时候 G2 会在内部调用默认的回调函数，读取默认提供的颜色进行数据值到颜色值的映射。\r\n         * geometry.color('x');\r\n         *\r\n         * // 将 'x' 字段的数据值映射至指定的颜色值 colors（可以是字符串也可以是数组），此时用于通常映射分类数据\r\n         * geometry.color('x', [ '#1890ff', '#5AD8A6' ]);\r\n         *\r\n         * // 使用回调函数进行颜色值的自定义；可以使用多个字段使用、*号连接\r\n         * geometry.color('x', (xVal) => {\r\n         *   if (xVal === 'a') {\r\n         *     return 'red';\r\n         *   }\r\n         *   return 'blue';\r\n         * });\r\n         *\r\n         * // 指定颜色的渐变路径，用于映射连续的数据\r\n         * geometry.color('x', '#BAE7FF-#1890FF-#0050B3');\r\n         * ```\r\n         *\r\n         * @param field 参与颜色映射的数据字段，多个字段使用 '*' 连接符进行连接。\r\n         * @param cfg Optional, color 映射规则。\r\n         * @returns\r\n         */\r\n        color(field: string, cfg?: string | string[] | ColorAttrCallback): Geometry;\r\n        /**\r\n         * 配置 shape 通道映射规则。\r\n         *\r\n         * @example\r\n         *\r\n         * ```typescript\r\n         * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\r\n         * geometry.shape({\r\n         *   fields: [ 'x' ],\r\n         * });\r\n         * ```\r\n         *\r\n         * @param field 映射规则配置。\r\n         * @returns\r\n         */\r\n        shape(field: AttributeOption): Geometry;\r\n        /**\r\n         *\r\n         * @example\r\n         * ```typescript\r\n         * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\r\n         *\r\n         * // 指定常量，将所有数据值映射到固定的 shape\r\n         * geometry.shape('circle');\r\n         *\r\n         * // 将指定的字段映射到内置的 shapes 数组中\r\n         * geometry.shape('x');\r\n         *\r\n         * // 将指定的字段映射到指定的 shapes 数组中\r\n         * geometry.shape('x', [ 'circle', 'diamond', 'square' ]);\r\n         *\r\n         * // 使用回调函数获取 shape，用于个性化的 shape 定制，可以根据单个或者多个字段确定\r\n         * geometry.shape('x', (xVal) => {\r\n         *   if (xVal === 'a') {\r\n         *     return 'circle';\r\n         *   }\r\n         *   return 'diamond';\r\n         * });\r\n         * ```\r\n         *\r\n         * @param field 参与 shape 映射的数据字段，多个字段使用 '*' 连接符进行连接。\r\n         * @param cfg Optional, shape 映射规则。\r\n         * @returns\r\n         */\r\n        shape(field: string, cfg?: string[] | ShapeAttrCallback): Geometry;\r\n        /**\r\n         * 配置 size 通道映射规则。\r\n         *\r\n         * @example\r\n         * ```typescript\r\n         * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\r\n         * geometry.size({\r\n         *   values: [ 10 ],\r\n         * })\r\n         * ```\r\n         *\r\n         * @param field 映射规则。\r\n         * @returns\r\n         */\r\n        size(field: AttributeOption): Geometry;\r\n        /**\r\n         *\r\n         * @example\r\n         * ```typescript\r\n         * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\r\n         *\r\n         * // 直接指定像素大小\r\n         * geometry.size(10);\r\n         *\r\n         * // 指定映射到 size 的字段，使用内置的默认大小范围为 [1, 10]\r\n         * geometry.size('x');\r\n         *\r\n         * // 指定映射到 size 字段外，还提供了 size 的最大值和最小值范围\r\n         * geometry.size('x', [ 5, 30 ]);\r\n         *\r\n         * // 使用回调函数映射 size，用于个性化的 size 定制，可以使用多个字段进行映射\r\n         * geometry.size('x', (xVal) => {\r\n         *   if (xVal === 'a') {\r\n         *     return 10;\r\n         *   }\r\n         *   return 5;\r\n         * });\r\n         * ```\r\n         *\r\n         * @param field 参与 size 映射的数据字段，多个字段使用 '*' 连接符进行连接。\r\n         * @param cfg Optional, size 映射规则\r\n         * @returns\r\n         */\r\n        size(field: number | string, cfg?: [number, number] | SizeAttrCallback): Geometry;\r\n        /**\r\n         * 设置数据调整方式。G2 目前内置了四种类型：\r\n         * 1. dodge\r\n         * 2. stack\r\n         * 3. symmetric\r\n         * 4. jitter\r\n         *\r\n         *\r\n         * **Tip**\r\n         * + 对于 'dodge' 类型，可以额外进行如下属性的配置:\r\n         * ```typescript\r\n         * geometry.adjust('dodge', {\r\n         *   marginRatio: 0, // 取 0 到 1 范围的值（相对于每个柱子宽度），用于控制一个分组中柱子之间的间距\r\n         *   dodgeBy: 'x', // 该属性只对 'dodge' 类型生效，声明以哪个数据字段为分组依据\r\n         * });\r\n         * ```\r\n         *\r\n         * + 对于 'stack' 类型，可以额外进行如下属性的配置:\r\n         * ```typescript\r\n         * geometry.adjust('stack', {\r\n         *   reverseOrder: false, // 用于控制是否对数据进行反序操作\r\n         * });\r\n         * ```\r\n         *\r\n         * @example\r\n         * ```typescript\r\n         * geometry.adjust('stack');\r\n         *\r\n         * geometry.adjust({\r\n         *   type: 'stack',\r\n         *   reverseOrder: false,\r\n         * });\r\n         *\r\n         * // 组合使用 adjust\r\n         * geometry.adjust([ 'stack', 'dodge' ]);\r\n         *\r\n         * geometry.adjust([\r\n         *   { type: 'stack' },\r\n         *   { type: 'dodge', dodgeBy: 'x' },\r\n         * ]);\r\n         * ```\r\n         *\r\n         * @param adjustCfg 数据调整配置\r\n         * @returns\r\n         */\r\n        adjust(adjustCfg: string | string[] | AdjustOption | AdjustOption[]): Geometry;\r\n        /**\r\n         * 图形样式配置。\r\n         *\r\n         * @example\r\n         * ```typescript\r\n         * // 配置图形样式\r\n         * style({\r\n         *   lineWidth: 2,\r\n         *   stroke: '#1890ff',\r\n         * });\r\n         *\r\n         * // 根据具体的数据进行详细配置\r\n         * style({\r\n         *   fields: [ 'x', 'y' ], // 数据字段\r\n         *   callback: (xVal, yVal) => {\r\n         *     const style = { lineWidth: 2, stroke: '#1890ff' };\r\n         *     if (xVal === 'a') {\r\n         *       style.lineDash = [ 2, 2 ];\r\n         *     }\r\n         *     return style;\r\n         *   },\r\n         * });\r\n         * ```\r\n         *\r\n         * @param field 配置样式属性或者样式规则。\r\n         * @returns\r\n         */\r\n        style(field: StyleOption | LooseObject): Geometry;\r\n        /**\r\n         * @example\r\n         * ```typescript\r\n         * style('x*y', (xVal, yVal) => {\r\n         *   const style = { lineWidth: 2, stroke: '#1890ff' };\r\n         *   if (xVal === 'a') {\r\n         *     style.lineDash = [ 2, 2 ];\r\n         *   }\r\n         *   return style;\r\n         * });\r\n         * ```\r\n         *\r\n         * @param field 数据字段或者样式配置规则。\r\n         * @param styleFunc Optional, 样式配置回调函数。\r\n         * @returns\r\n         */\r\n        style(field: string, styleFunc: StyleCallback): Geometry;\r\n        /**\r\n         * 配置 Geometry 显示的 tooltip 内容。\r\n         *\r\n         * `tooltip(false)` 代表关闭 tooltip。\r\n         * `tooltip(true)` 代表开启 tooltip。\r\n         *\r\n         * Geometry 默认允许 tooltip 展示，我们可以使用以下方法对 tooltip 的展示内容进行配置：\r\n         *\r\n         * @example\r\n         * ```typescript\r\n         * // data: [{x: 'a', y: 10}]\r\n         * tooltip({\r\n         *   fields: [ 'x' ],\r\n         * });\r\n         * ```\r\n         * ![](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*268uQ50if60AAAAAAAAAAABkARQnAQ)\r\n         *\r\n         * ```typescript\r\n         * tooltip({\r\n         *   fields: [ 'x', 'y' ],\r\n         * });\r\n         * ```\r\n         * ![](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*A_ujSa8QhtcAAAAAAAAAAABkARQnAQ)\r\n         *\r\n         * tooltip() 方法同样支持数据映射及回调用法：\r\n         *\r\n         * @example\r\n         * ```typescript\r\n         * chart.tooltip({\r\n         *   itemTpl: '<li>{x}: {y}</li>',\r\n         * });\r\n         *\r\n         * chart.line()\r\n         *   .position('x*y')\r\n         *   .tooltip({\r\n         *     fields: [ 'x', 'y' ],\r\n         *     callback: (x, y) => {\r\n         *       return {\r\n         *         x,\r\n         *         y,\r\n         *       };\r\n         *     },\r\n         *   });\r\n         * ```\r\n         *\r\n         * 其返回的值必须为对象，该值中的属性同 chart.tooltip() 的 itemTpl 模板相对应，返回的变量可用于 itemTpl 的字符串模板。\r\n         *\r\n         * @param field tooltip 配置信息。\r\n         * @returns\r\n         */\r\n        tooltip(field: GeometryTooltipOption | boolean): Geometry;\r\n        /**\r\n         * @example\r\n         * ```typescript\r\n         * // data: [{x: 'a', y: 10}]\r\n         *\r\n         * // 等同于 tooltip({ fields: [ 'x' ] })\r\n         * tooltip('x');\r\n         *\r\n         * // 等同于 tooltip({ fields: [ 'x', 'y' ] })\r\n         * tooltip('x*y');\r\n         *\r\n         * // 等同于 tooltip({ fields: [ 'x', 'y' ], callback: (x, y) => { x, y } })\r\n         * tooltip('x*y', (x, y) => {\r\n         *   return {\r\n         *     x,\r\n         *     y,\r\n         *   };\r\n         * });\r\n         * ```\r\n         *\r\n         * @param field 参与映射的字段。\r\n         * @param cfg Optional, 回调函数\r\n         * @returns\r\n         */\r\n        tooltip(field: string, cfg?: TooltipCallback): Geometry;\r\n        /**\r\n         * Geometry 动画配置。\r\n         *\r\n         * + `animate(false)` 关闭动画\r\n         * + `animate(true)` 开启动画，默认开启。\r\n         *\r\n         * 我们将动画分为四个场景：\r\n         * 1. appear: 图表第一次加载时的入场动画；\r\n         * 2. enter: 图表绘制完成，发生更新后，产生的新图形的进场动画；\r\n         * 3. update: 图表绘制完成，数据发生变更后，有状态变更的图形的更新动画；\r\n         * 4. leave: 图表绘制完成，数据发生变更后，被销毁图形的销毁动画。\r\n         *\r\n         * @example\r\n         * ```typescript\r\n         * animate({\r\n         *   enter: {\r\n         *     duration: 1000, // enter 动画执行时间\r\n         *   },\r\n         *   leave: false, // 关闭 leave 销毁动画\r\n         * });\r\n         * ```\r\n         *\r\n         * @param cfg 动画配置\r\n         * @returns\r\n         */\r\n        animate(cfg: AnimateOption | boolean): Geometry;\r\n        /**\r\n         * Geometry label 配置。\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * // data: [ {x: 1, y: 2, z: 'a'}, {x: 2, y: 2, z: 'b'} ]\r\n         * // 在每个图形上显示 z 字段对应的数值\r\n         * label({\r\n         *   fields: [ 'z' ]\r\n         * });\r\n         *\r\n         * label(false); // 不展示 label\r\n         *\r\n         * // 在每个图形上显示 x 字段对应的数值，同时配置文本颜色为红色\r\n         * label('x', {\r\n         *   style: {\r\n         *     fill: 'red',\r\n         *   },\r\n         * })\r\n         *\r\n         * // 以 type 类型的 label 渲染每个图形上显示 x 字段对应的数值，同时格式化文本内容\r\n         * label('x', (xValue) => {\r\n         *   return {\r\n         *     content: xValue + '%',\r\n         *   };\r\n         * }, {\r\n         *   type: 'base' // 声明 label 类型\r\n         * })\r\n         * ```\r\n         *\r\n         * @param field\r\n         * @returns label\r\n         */\r\n        label(field: LabelOption | false | string): Geometry;\r\n        label(field: string, secondParam: GeometryLabelCfg | LabelCallback): Geometry;\r\n        label(field: string, secondParam: LabelCallback, thirdParam: GeometryLabelCfg): Geometry;\r\n        /**\r\n         * 设置状态对应的样式。\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * chart.interval().state({\r\n         *   selected: {\r\n         *     animate: { duration: 100, easing: 'easeLinear' },\r\n         *     style: {\r\n         *       lineWidth: 2,\r\n         *       stroke: '#000',\r\n         *     },\r\n         *   },\r\n         * });\r\n         * ```\r\n         *\r\n         * 如果图形 shape 是由多个 shape 组成，即为一个 G.Group 对象，那么针对 group 中的每个 shape，我们需要使用下列方式进行状态样式设置：\r\n         * 如果我们为 group 中的每个 shape 设置了 'name' 属性(shape.set('name', 'xx'))，则以 'name' 作为 key，否则默认以索引值（即 shape 的 添加顺序）为 key。\r\n         *\r\n         * ```ts\r\n         * chart.interval().shape('groupShape').state({\r\n         *   selected: {\r\n         *     style: {\r\n         *       0: { lineWidth: 2 },\r\n         *       1: { fillOpacity: 1 },\r\n         *     }\r\n         *   }\r\n         * });\r\n         * ```\r\n         *\r\n         * @param cfg 状态样式\r\n         */\r\n        state(cfg: StateOption): this;\r\n        /**\r\n         * 用于向 shape 中传入自定义的数据。目前可能仅仅可能用于在自定义 shape 的时候，像自定义 shape 中传入自定义的数据，方便实现自定义 shape 的配置能力。\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * chart.interval().customInfo({ yourData: 'hello, g2!' });\r\n         * ```\r\n         *\r\n         * 然后在自定义 shape 的时候，可以拿到这个信息。\r\n         *\r\n         * ```ts\r\n         * registerShape('interval', 'your-shape', {\r\n         *   draw(shapeInfo, container) {\r\n         *     const { customInfo } = shapeInfo;\r\n         *     console.log(customInfo); // will log { yourData: 'hello, g2!' }.\r\n         *   }\r\n         * });\r\n         * ```\r\n         *\r\n         * @param cfg\r\n         */\r\n        customInfo(cfg: any): this;\r\n        /**\r\n         * 初始化 Geomtry 实例：\r\n         * 创建 [[Attribute]] and [[Scale]] 实例，进行数据处理，包括分组、数值化以及数据调整。\r\n         */\r\n        init(cfg?: InitCfg): void;\r\n        /**\r\n         * Geometry 更新。\r\n         * @param [cfg] 更新的配置\r\n         */\r\n        update(cfg?: InitCfg): void;\r\n        /**\r\n         * 将原始数据映射至图形空间，同时创建图形对象。\r\n         */\r\n        paint(isUpdate?: boolean): void;\r\n        /**\r\n         * 清空当前 Geometry，配置项仍保留，但是内部创建的对象全部清空。\r\n         * @override\r\n         */\r\n        clear(): void;\r\n        /**\r\n         * 销毁 Geometry 实例。\r\n         */\r\n        destroy(): void;\r\n        /**\r\n         * 获取决定分组的图形属性对应的 scale 实例。\r\n         * @returns\r\n         */\r\n        getGroupScales(): Scale[];\r\n        /**\r\n         * 根据名字获取图形属性实例。\r\n         */\r\n        getAttribute(name: string): Attribute;\r\n        /** 获取 x 轴对应的 scale 实例。 */\r\n        getXScale(): Scale;\r\n        /** 获取 y 轴对应的 scale 实例。 */\r\n        getYScale(): Scale;\r\n        /**\r\n         * 获取决定分组的图形属性实例。\r\n         */\r\n        getGroupAttributes(): Attribute[];\r\n        /** 获取图形属性默认的映射值。 */\r\n        getDefaultValue(attrName: string): any;\r\n        /**\r\n         * 获取该数据发生图形映射后对应的 Attribute 图形空间数据。\r\n         * @param attr Attribute 图形属性实例。\r\n         * @param obj 需要进行映射的原始数据。\r\n         * @returns\r\n         */\r\n        getAttributeValues(attr: Attribute, obj: Datum): any[];\r\n        /**\r\n         * 获取对应的 adjust 实例\r\n         * @param adjustType\r\n         * @returns\r\n         */\r\n        getAdjust(adjustType: string): Adjust;\r\n        /**\r\n         * 获得 coordinate 实例\r\n         * @returns\r\n         */\r\n        getCoordinate(): Coordinate;\r\n        getData(): Data;\r\n        /**\r\n         * 获取 shape 对应的 marker 样式。\r\n         * @param shapeName shape 具体名字\r\n         * @param cfg marker 信息\r\n         * @returns\r\n         */\r\n        getShapeMarker(shapeName: string, cfg: ShapeMarkerCfg): ShapeMarkerAttrs;\r\n        /**\r\n         * 根据一定的规则查找 Geometry 的 Elements。\r\n         *\r\n         * ```typescript\r\n         * getElementsBy((element) => {\r\n         *   const data = element.getData();\r\n         *\r\n         *   return data.a === 'a';\r\n         * });\r\n         * ```\r\n         *\r\n         * @param condition 定义查找规则的回调函数。\r\n         * @returns\r\n         */\r\n        getElementsBy(condition: (element: Element_2) => boolean): Element_2[];\r\n        /**\r\n         * 获取 Geometry 的所有 Elements。\r\n         *\r\n         * ```typescript\r\n         * getElements();\r\n         * ```\r\n         */\r\n        getElements(): Element_2[];\r\n        /**\r\n         * 获取数据对应的唯一 id。\r\n         * @param data Element 对应的绘制数据\r\n         * @returns\r\n         */\r\n        getElementId(data: MappingDatum | MappingDatum[]): any;\r\n        /**\r\n         * 获取所有需要创建 scale 的字段名称。\r\n         */\r\n        getScaleFields(): string[];\r\n        /**\r\n         * 显示或者隐藏 geometry。\r\n         * @param visible\r\n         */\r\n        changeVisible(visible: boolean): void;\r\n        /**\r\n         * 获得所有的字段\r\n         */\r\n        getFields(): any[];\r\n        /**\r\n         * 获取当前配置中的所有分组 & 分类的字段。\r\n         * @return fields string[]\r\n         */\r\n        getGroupFields(): string[];\r\n        /**\r\n         * 获得图形的 x y 字段。\r\n         */\r\n        getXYFields(): string[];\r\n        /**\r\n         * x 字段\r\n         * @returns\r\n         */\r\n        getXField(): string;\r\n        /**\r\n         * y 字段\r\n         * @returns\r\n         */\r\n        getYField(): string;\r\n        /**\r\n         * 获取该 Geometry 下所有生成的 shapes。\r\n         * @returns shapes\r\n         */\r\n        getShapes(): (IShape | IGroup)[];\r\n        /**\r\n         * 获取虚拟 Group。\r\n         * @returns\r\n         */\r\n        getOffscreenGroup(): IGroup;\r\n        sort(mappingArray: Data[]): void;\r\n        /**\r\n         * 调整度量范围。主要针对发生层叠以及一些特殊需求的 Geometry，比如 Interval 下的柱状图 Y 轴默认从 0 开始。\r\n         */\r\n        protected adjustScale(): void;\r\n        /**\r\n         * 获取当前 Geometry 对应的 Shape 工厂实例。\r\n         */\r\n        protected getShapeFactory(): ShapeFactory;\r\n        /**\r\n         * 获取每个 Shape 对应的关键点数据。\r\n         * @param obj 经过分组 -> 数字化 -> adjust 调整后的数据记录\r\n         * @returns\r\n         */\r\n        protected createShapePointsCfg(obj: Datum): S;\r\n        /**\r\n         * 创建 Element 实例。\r\n         * @param mappingDatum Element 对应的绘制数据\r\n         * @param [isUpdate] 是否处于更新阶段\r\n         * @returns element 返回创建的 Element 实例\r\n         */\r\n        protected createElement(mappingDatum: MappingDatum, index: number, isUpdate?: boolean): Element_2;\r\n        /**\r\n         * 获取每条数据对应的图形绘制数据。\r\n         * @param mappingDatum 映射后的数据\r\n         * @returns draw cfg\r\n         */\r\n        protected getDrawCfg(mappingDatum: MappingDatum): ShapeInfo;\r\n        protected updateElements(mappingDataArray: MappingDatum[][], isUpdate?: boolean): void;\r\n        /**\r\n         * 获取渲染的 label 类型。\r\n         */\r\n        protected getLabelType(): string;\r\n        /**\r\n         * 获取 Y 轴上的最小值。\r\n         */\r\n        protected getYMinValue(): number;\r\n        protected createAttrOption(attrName: string, field: AttributeOption | string | number, cfg?: any): void;\r\n        protected initAttributes(): void;\r\n        private processData;\r\n        private adjustData;\r\n        private groupData;\r\n        private updateStackRange;\r\n        private beforeMapping;\r\n        private generateShapePoints;\r\n        private normalizeValues;\r\n        private mapping;\r\n        private convertPoint;\r\n        private getStyleCfg;\r\n        private setCfg;\r\n        private renderLabels;\r\n        /**\r\n         * 是否需要进行群组入场动画\r\n         * 规则：\r\n         * 1. 如果发生更新，则不进行\r\n         * 2. 如果用户关闭 geometry 动画，则不进行\r\n         * 3. 如果用户关闭了 appear 动画，则不进行\r\n         * 4. 如果用户配置了 appear.animation，则不进行\r\n         */\r\n        private canDoGroupAnimation;\r\n    }\r\n\r\n    /** Geometry 构造函数参数 */\r\n    declare interface GeometryCfg {\r\n        /** Geometry shape 的容器。 */\r\n        container: IGroup;\r\n        /** 绘制的坐标系对象。 */\r\n        coordinate?: Coordinate;\r\n        /** 绘制数据。 */\r\n        data?: Data;\r\n        /** 需要的 scales。 */\r\n        scales?: Record<string, Scale>;\r\n        /** 列定义 */\r\n        scaleDefs?: Record<string, ScaleOption>;\r\n        /** Geometry labels 的容器 */\r\n        labelsContainer?: IGroup;\r\n        /** 是否对数据进行排序 */\r\n        sortable?: boolean;\r\n        /** elements 的 zIndex 默认按顺序提升，通过 zIndexReversed 可以反序，从而数据越前，层级越高 */\r\n        zIndexReversed?: boolean;\r\n        /** 是否需要对 zIndex 进行 sort。因为耗时长，由具体场景自行决定 */\r\n        sortZIndex?: boolean;\r\n        /** 延迟渲染 Geometry 数据标签. 设置为 true 时，会在浏览器空闲时期被调用, 也可以指定具体 timeout 时间 */\r\n        useDeferredLabel?: boolean | number;\r\n        /** 是否可见 */\r\n        visible?: boolean;\r\n        /** 主题配置 */\r\n        theme?: LooseObject;\r\n        /** 组间距 */\r\n        intervalPadding?: number;\r\n        /** 组内间距 */\r\n        dodgePadding?: number;\r\n        /** 柱状图最大宽度 */\r\n        maxColumnWidth?: number;\r\n        /** 柱状图最小宽度 */\r\n        minColumnWidth?: number;\r\n        /** 默认宽度占比，interval类型和schema类型通用 */\r\n        columnWidthRatio?: number;\r\n        /** 玫瑰图占比 */\r\n        roseWidthRatio?: number;\r\n        /** 多层饼图/环图占比 */\r\n        multiplePieWidthRatio?: number;\r\n    }\r\n\r\n    /**\r\n     * @title geometry.label({}) 配置属性\r\n     */\r\n    declare interface GeometryLabelCfg {\r\n        /**\r\n         * @title 类型\r\n         * @description 用于声明渲染的 label 类型。当用户使用了自定义的 label 类型，需要声明具体的 type 类型，否则会使用默认的 label 类型渲染。\r\n         */\r\n        type?: string;\r\n        /**\r\n         * @title 相对数据点的偏移距离, polar 和 theta 坐标系下可使用百分比字符串。\r\n         */\r\n        offset?: number | string;\r\n        /**\r\n         * @title label 相对于数据点在 X 方向的偏移距离。\r\n         */\r\n        offsetX?: number;\r\n        /**\r\n         * @title label 相对于数据点在 Y 方向的偏移距离。\r\n         */\r\n        offsetY?: number;\r\n        /**\r\n         * @title 文本内容\r\n         * @description 展示的文本内容，如果不声明则按照参与映射的第一字段的值进行显示。当 content 为 IGroup 或者 IShape 类型时，请使用相对定位，即 x 和 y 坐标都设为 0，G2 内部会整体做最后的 label 进行定位的。\r\n         * @link 示例： https://g2.antv.vision/zh/examples/pie/basic#pie-custome-label\r\n         */\r\n        content?: string | IGroup | IShape | GeometryLabelContentCallback;\r\n        /**\r\n         * @title 文本样式\r\n         * @description label 文本图形属性样式。\r\n         */\r\n        style?: LooseObject;\r\n        /**\r\n         * @title 是否自动旋转\r\n         * @description label 是否自动旋转\r\n         * @default true\r\n         */\r\n        autoRotate?: boolean;\r\n        /**\r\n         * @title 旋转\r\n         * @description 当且仅当 `autoRotate` 为 false 时生效，用于设置文本的旋转角度，**弧度制**。\r\n         */\r\n        rotate?: number;\r\n        /**\r\n         * @title 标签高度\r\n         * @description 标签高度设置，仅当标签类型 type 为 pie 时生效；也可在主题中设置 pieLabels.labelHeight\r\n         */\r\n        labelHeight?: number;\r\n        /**\r\n         * @title 文本连接线\r\n         * @description 用于设置文本连接线的样式属性，null 表示不展示。\r\n         */\r\n        labelLine?: null | boolean | {\r\n            style?: object;\r\n        };\r\n        /**\r\n         * @title 文本放射状\r\n         * @description 只对极坐标下的文本生效，表示文本是否按照角度进行放射状显示，true 表示开启，false 表示关闭。\r\n         */\r\n        labelEmit?: boolean;\r\n        /**\r\n         * @title 文本布局\r\n         * 文本布局类型，支持多种布局函数组合使用。\r\n         *\r\n         * 目前提供了三种：'overlap'，'fixedOverlap'，'limitInShape'：\r\n         * 1. overlap: label 防遮挡，为了防止 label 之间相互覆盖，通过尝试向**四周偏移**来剔除放不下的 label。\r\n         * 2. fixed-overlap: 不改变 label 位置的情况下对相互重叠的 label 进行调整。\r\n         * 3. limit-in-shape: 剔除 shape 容纳不了的 label。\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * layout: {\r\n         *   type: 'overlap',\r\n         * },\r\n         * ```\r\n         */\r\n        layout?: GeometryLabelLayoutCfg | GeometryLabelLayoutCfg[];\r\n        /**\r\n         * @title 背景\r\n         * @description 用于绘制 label 背景\r\n         */\r\n        background?: {\r\n            /**\r\n             * @title 背景框图形属性配置\r\n             * - fill?: string; 背景框 填充色\r\n             * - stroke?: string; 背景框 描边色\r\n             * - lineWidth?: string; 背景框 描边宽度\r\n             * - radius?: number | number[]; 背景框圆角，支持整数或数组形式\r\n             */\r\n            style?: ShapeAttrs;\r\n            /**\r\n             * @title 背景框 内边距\r\n             */\r\n            padding?: number | number[];\r\n        };\r\n        /**\r\n         * @title 位置\r\n         * @description 仅当 geometry 为 interval 时生效，指定当前 label 与当前图形的相对位置。\r\n         */\r\n        position?: ((data: Datum, mappingData: MappingDatum, index: number) => IntervalGeometryLabelPosition) | IntervalGeometryLabelPosition;\r\n        /**\r\n         * @title 动画配置。\r\n         */\r\n        animate?: AnimateOption | false | null;\r\n    }\r\n\r\n    /**\r\n     * @title geometry label 中 content 属性的回调函数类型定义\r\n     */\r\n    declare type GeometryLabelContentCallback = (data: Datum, mappingData: MappingDatum, index: number) => string | IShape | IGroup;\r\n\r\n    declare interface GeometryLabelLayoutCfg {\r\n        /**\r\n         * @title label 布局类型。\r\n         */\r\n        type: string;\r\n        /**\r\n         * @title 各个布局函数开放给用户的配置。\r\n         */\r\n        cfg?: LooseObject;\r\n    }\r\n\r\n    /**\r\n     * @title 用于配置项式的 Geometry 创建方式\r\n     */\r\n    declare interface GeometryOption {\r\n        /**\r\n         * @title Geometry 的类型。\r\n         */\r\n        type?: 'interval' | 'line' | 'path' | 'point' | 'area' | 'polygon' | 'schema' | 'edge' | 'heatmap' | string;\r\n        /**\r\n         * @title position 通道映射规则，对应 `geometry.position()`。\r\n         */\r\n        position?: string | AttributeOption;\r\n        /**\r\n         * @title color 通道映射规则，对应 `geometry.color()`。\r\n         */\r\n        color?: string | AttributeOption;\r\n        /**\r\n         * @title shape 通道映射规则，对应 `geometry.shape()`。\r\n         */\r\n        shape?: string | AttributeOption;\r\n        /**\r\n         * @title size 通道映射规则，对应 `geometry.size()`。\r\n         */\r\n        size?: number | string | AttributeOption;\r\n        /**\r\n         * @title adjust 数据调整方式，对应 `geometry.adjust()`。\r\n         */\r\n        adjust?: string | string[] | AdjustOption | AdjustOption[];\r\n        /**\r\n         * @title style 样式配置，对应 `geometry.size()`。\r\n         */\r\n        style?: StyleOption | LooseObject;\r\n        /**\r\n         * @title tooltip 配置，对应 `geometry.tooltip()`。\r\n         */\r\n        tooltip?: GeometryTooltipOption | boolean | string;\r\n        /**\r\n         * @title Geometry 动画配置，对应 `geometry.animate()`。\r\n         */\r\n        animate?: AnimateOption | boolean;\r\n        /**\r\n         * @title Label 配置，对应 `geometry.label()`。\r\n         */\r\n        label?: LabelOption | false | string;\r\n        /**\r\n         * @title state 样式配置，对应 `geometry.state()`。\r\n         */\r\n        state?: StateOption;\r\n        /**\r\n         * @title 其他配置\r\n         */\r\n        cfg?: {\r\n            /**\r\n             * @title 是否对数据进行排序\r\n             */\r\n            sortable?: boolean;\r\n            /**\r\n             * @title 是否可见\r\n             */\r\n            visible?: boolean;\r\n            /**\r\n             * @title 是否连接空值，仅对 'line', 'area' 和 'path' 生效\r\n             */\r\n            connectNulls?: boolean;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @title `geometry.tooltip({})` Tooltip 配置定义\r\n     */\r\n    declare interface GeometryTooltipOption {\r\n        /**\r\n         * @title 参与映射的字段。\r\n         */\r\n        readonly fields: string[];\r\n        /**\r\n         * @title 回调函数。\r\n         */\r\n        readonly callback?: (...args: any[]) => LooseObject;\r\n    }\r\n\r\n    declare class GestureController extends Controller {\r\n        private canvas;\r\n        private processEvent;\r\n        private startTime;\r\n        private startPoints;\r\n        private startDistance;\r\n        private center;\r\n        private pressTimeout;\r\n        private direction;\r\n        private prevMoveTime;\r\n        private prevMovePoints;\r\n        private lastMoveTime;\r\n        private lastMovePoints;\r\n        private eventType;\r\n        constructor(view: View);\r\n        get name(): string;\r\n        init(): void;\r\n        render(): void;\r\n        layout(): void;\r\n        update(): void;\r\n        destroy(): void;\r\n        private delegateEvent;\r\n        private offEvent;\r\n        private touchStart;\r\n        private touchMove;\r\n        private touchEnd;\r\n        private emitEvent;\r\n        private emitStart;\r\n        private emitEnd;\r\n        private enable;\r\n        private isProcess;\r\n        private reset;\r\n        private clearPressTimeout;\r\n        private getEventType;\r\n    }\r\n\r\n    /**\r\n     * Html Annotation 配置\r\n     */\r\n    declare interface HtmlAnnotationOption extends PointPositionBaseOption {\r\n        /**\r\n         * @title 容器元素\r\n         */\r\n        container?: string | HTMLElement;\r\n        /**\r\n         * @title 自定义 HTML DOM 元素\r\n         */\r\n        html: string | HTMLElement | ((container: HTMLElement, view: View) => void | string | HTMLElement);\r\n        /**\r\n         * @title X 方向对齐\r\n         */\r\n        alignX?: 'left' | 'middle' | 'right';\r\n        /**\r\n         * @title Y 方向对齐\r\n         */\r\n        alignY?: 'top' | 'middle' | 'bottom';\r\n        /**\r\n         * @title X 方向偏移\r\n         */\r\n        offsetX?: number;\r\n        /**\r\n         * @title Y 方向偏移\r\n         */\r\n        offsetY?: number;\r\n    }\r\n\r\n    /**\r\n     * @title 使用 Image Annotation 组件的配置定义\r\n     */\r\n    declare interface ImageOption extends RegionPositionBaseOption {\r\n        /**\r\n         * @title 图片路径\r\n         */\r\n        readonly src: string;\r\n    }\r\n\r\n    /** geometry.init() 传入参数 */\r\n    declare interface InitCfg {\r\n        /** 坐标系 */\r\n        coordinate?: Coordinate;\r\n        /** 数据 */\r\n        data?: Data;\r\n        /** 主题对象 */\r\n        theme?: LooseObject;\r\n        /** 列定义 */\r\n        scaleDefs?: Record<string, ScaleOption>;\r\n        /** 因为数据使用的引用，所以需要有一个标识位标识数据是否发生了更新 */\r\n        isDataChanged?: boolean;\r\n        isCoordinateChanged?: boolean;\r\n    }\r\n\r\n    /**\r\n     * 交互的基类。\r\n     */\r\n    declare class Interaction {\r\n        /** view 或者 chart */\r\n        protected view: View;\r\n        /** 配置项 */\r\n        protected cfg: LooseObject;\r\n        constructor(view: View, cfg: LooseObject);\r\n        /**\r\n         * 初始化。\r\n         */\r\n        init(): void;\r\n        /**\r\n         * 绑定事件\r\n         */\r\n        protected initEvents(): void;\r\n        /**\r\n         * 销毁事件\r\n         */\r\n        protected clearEvents(): void;\r\n        /**\r\n         * 销毁。\r\n         */\r\n        destroy(): void;\r\n    }\r\n\r\n    /**\r\n     * @title 用于配置项式声明交互行为\r\n     */\r\n    declare interface InteractionOption {\r\n        /**\r\n         * @title 交互名称\r\n         */\r\n        type: string;\r\n        /**\r\n         * @title 交互配置\r\n         */\r\n        cfg?: LooseObject;\r\n    }\r\n\r\n    /**\r\n     * @title interval label 的位置\r\n     */\r\n    declare type IntervalGeometryLabelPosition = 'top' | 'bottom' | 'middle' | 'left' | 'right';\r\n\r\n    /**\r\n     * @title geometry.label() 接口回调函数定义\r\n     */\r\n    declare type LabelCallback = (...args: any[]) => GeometryLabelCfg | null | undefined;\r\n\r\n    /**\r\n     * @title `geometry().label({})` 配置定义\r\n     */\r\n    declare interface LabelOption {\r\n        /**\r\n         * @title 映射的字段。\r\n         */\r\n        fields?: string[];\r\n        /**\r\n         * @title 回调函数。\r\n         */\r\n        callback?: LabelCallback;\r\n        cfg?: GeometryLabelCfg;\r\n    }\r\n\r\n    /**\r\n     * view 中三层 group 分层 key\r\n     */\r\n    declare enum LAYER {\r\n        /** 前景层 */\r\n        FORE = \"fore\",\r\n        /** 中间层 */\r\n        MID = \"mid\",\r\n        /** 背景层 */\r\n        BG = \"bg\"\r\n    }\r\n\r\n    declare type Layout = (view: View) => void;\r\n\r\n    /**\r\n     * @ignore\r\n     * legend Controller\r\n     */\r\n    declare class Legend extends Controller<AllLegendsOptions> {\r\n        /** the draw group of axis */\r\n        private container;\r\n        /** 用于多个 legend 布局的 bbox */\r\n        private layoutBBox;\r\n        constructor(view: View);\r\n        get name(): string;\r\n        init(): void;\r\n        /**\r\n         * render the legend component by legend options\r\n         */\r\n        render(): void;\r\n        /**\r\n         * layout legend\r\n         * 计算出 legend 的 direction 位置 x, y\r\n         */\r\n        layout(): void;\r\n        /**\r\n         * legend 的更新逻辑\r\n         */\r\n        update(): void;\r\n        clear(): void;\r\n        destroy(): void;\r\n        /**\r\n         * 递归获取所有的 Geometry\r\n         */\r\n        private getGeometries;\r\n        /**\r\n         * 遍历 Geometry，处理 legend 逻辑\r\n         * @param doEach 每个 loop 中的处理方法\r\n         */\r\n        private loopLegends;\r\n        /**\r\n         * 创建一个 legend\r\n         * @param geometry\r\n         * @param attr\r\n         * @param scale\r\n         */\r\n        private createFieldLegend;\r\n        /**\r\n         * 自定义图例使用 category 图例去渲染\r\n         * @param geometry\r\n         * @param attr\r\n         * @param scale\r\n         * @param legendOption\r\n         */\r\n        private createCustomLegend;\r\n        /**\r\n         * 创建连续图例\r\n         * @param geometry\r\n         * @param attr\r\n         * @param scale\r\n         * @param legendOption\r\n         */\r\n        private createContinuousLegend;\r\n        /**\r\n         * 创建分类图例\r\n         * @param geometry\r\n         * @param attr\r\n         * @param scale\r\n         * @param legendOption\r\n         */\r\n        private createCategoryLegend;\r\n        /**\r\n         * 获得连续图例的配置\r\n         * @param geometry\r\n         * @param attr\r\n         * @param scale\r\n         * @param legendOption\r\n         */\r\n        private getContinuousCfg;\r\n        /**\r\n         * 获取分类图例的配置项\r\n         * @param geometry\r\n         * @param attr\r\n         * @param scale\r\n         * @param custom\r\n         * @param legendOption\r\n         */\r\n        private getCategoryCfg;\r\n        /**\r\n         * get legend config, use option > suggestion > theme\r\n         * @param baseCfg\r\n         * @param legendOption\r\n         * @param direction\r\n         */\r\n        private mergeLegendCfg;\r\n        /**\r\n         * 生成 id\r\n         * @param key\r\n         */\r\n        private getId;\r\n        /**\r\n         * 根据 id 来获取组件\r\n         * @param id\r\n         */\r\n        private getComponentById;\r\n        private getCategoryLegendSizeCfg;\r\n    }\r\n\r\n    /**\r\n     * 图例项配置\r\n     */\r\n    declare interface LegendCfg extends Omit<CategoryLegendCfg, 'marker'> {\r\n        /**\r\n         * @title 是否为自定义图例\r\n         * @description 当该属性为 true 时，需要声明 items 属性。\r\n         */\r\n        readonly custom?: boolean;\r\n        /**\r\n         * @title 布局\r\n         * @description 布局方式： horizontal，vertical\r\n         */\r\n        layout?: 'horizontal' | 'vertical';\r\n        /**\r\n         * @title 图例标题配置\r\n         * @description 默认不展示。\r\n         * @example\r\n         * 属性结构如下：\r\n         *\r\n         * ```ts\r\n         * {\r\n         *   spacing?: number;    // 标题同图例项的间距\r\n         *   style?: ShapeAttrs;  // 文本样式配置项\r\n         * }\r\n         * ```\r\n         *\r\n         * @link https://github.com/antvis/component/blob/81890719a431b3f9088e0c31c4d5d382ef0089df/src/types.ts#L639|LegendTitleCfg\r\n         */\r\n        title?: G2LegendTitleCfg;\r\n        /**\r\n         * @title 背景框配置项。\r\n         * @example\r\n         * 属性结构如下：\r\n         *\r\n         * ```ts\r\n         * {\r\n         *   padding?: number | number[]; // 背景的留白\r\n         *   style?: ShapeAttrs;          // 背景样式配置项\r\n         * }\r\n         * ```\r\n         *\r\n         * 详见 {@link https://github.com/antvis/component/blob/81890719a431b3f9088e0c31c4d5d382ef0089df/src/types.ts#L652|LegendBackgroundCfg}\r\n         */\r\n        background?: LegendBackgroundCfg;\r\n        /**\r\n         * @title 图例的位置。\r\n         */\r\n        position?: 'top' | 'top-left' | 'top-right' | 'right' | 'right-top' | 'right-bottom' | 'left' | 'left-top' | 'left-bottom' | 'bottom' | 'bottom-left' | 'bottom-right';\r\n        /**\r\n         * @title 动画开关，默认关闭。\r\n         */\r\n        animate?: boolean;\r\n        /**\r\n         * @title 动画\r\n         * @description 动画参数配置，当且仅当 `animate` 属性为 true，即动画开启时生效。\r\n         */\r\n        animateOption?: ComponentAnimateOption;\r\n        /**\r\n         * @title 水平间距\r\n         * @description **分类图例适用**，控制图例项水平方向的间距。\r\n         */\r\n        itemSpacing?: number;\r\n        /**\r\n         * @title 垂直间距\r\n         * @description **分类图例适用**，控制图例项垂直方向的间距。\r\n         */\r\n        itemMarginBottom?: number;\r\n        /**\r\n         * @title 图例项的最大宽度\r\n         * @description\r\n         * **分类图例适用**，图例项的最大宽度，超出则自动缩略。\r\n         * `maxItemWidth` 可以是像素值；\r\n         * 也可以是相对值（取 0 到 1 范围的数值），代表占图表宽度的多少\r\n         */\r\n        maxItemWidth?: number;\r\n        /**\r\n         * @title 图例项的宽度\r\n         * @description **分类图例适用**，图例项的宽度, 默认为 null，自动计算。\r\n         */\r\n        itemWidth?: number;\r\n        /**\r\n         * @title 图例项的高度\r\n         * @description **分类图例适用**，图例的高度，默认为 null。\r\n         */\r\n        itemHeight?: number;\r\n        /**\r\n         * @title 图例项 name\r\n         * @description\r\n         * **分类图例适用**，图例项 name 文本的配置。\r\n         * 属性结构如下：\r\n         *\r\n         * ```ts\r\n         * {\r\n         *   spacing?: number; // 图例项 name 同后面 value 的间距\r\n         *   formatter?: (text: string, item: ListItem, index: number) => any; // 格式化文本函数\r\n         *   style?: ShapeAttrs; // 文本配置项\r\n         * }\r\n         * ```\r\n         *\r\n         * @link https://github.com/antvis/component/blob/81890719a431b3f9088e0c31c4d5d382ef0089df/src/types.ts#L665|LegendItemNameCfg\r\n         */\r\n        itemName?: LegendItemNameCfg;\r\n        /**\r\n         * @title 图例项 value\r\n         * @description\r\n         * **分类图例适用**，图例项 value 附加值的配置项。\r\n         * 属性结构如下：\r\n         *\r\n         * ```ts\r\n         * {\r\n         *   alignRight?: boolean; // 是否右对齐，默认为 false，仅当设置图例项宽度时生效\r\n         *   formatter?: (text: string, item: ListItem, index: number) => any; // 格式化文本函数\r\n         *   style?: ShapeAttrs; // 图例项附加值的配置\r\n         * }\r\n         * ```\r\n         *\r\n         * @link https://github.com/antvis/component/blob/81890719a431b3f9088e0c31c4d5d382ef0089df/src/types.ts#L685|LegendItemValueCfg\r\n         */\r\n        itemValue?: LegendItemValueCfg;\r\n        /**\r\n         * @title 最大宽度\r\n         * @description **分类图例适用**，图例项最大宽度设置。\r\n         */\r\n        maxWidth?: number;\r\n        /**\r\n         * @title 最大高度\r\n         * @description **分类图例适用**，图例项最大高度设置。\r\n         */\r\n        maxHeight?: number;\r\n        /**\r\n         * @title 最大宽度比例\r\n         * @description **分类图例适用**，图例项最大宽度比例（以 view 的 bbox 宽度为参照，默认 0.25）。\r\n         */\r\n        maxWidthRatio?: number;\r\n        /**\r\n         * @title 最大高度比例\r\n         * @description **分类图例适用**，图例项最大高度比例（以 view 的 bbox 高度为参照，默认 0.25）。\r\n         */\r\n        maxHeightRatio?: number;\r\n        /**\r\n         * @title 图例项的 marker\r\n         * @description **分类图例适用**，图例项的 marker 图标的配置。\r\n         */\r\n        marker?: MarkerCfg | ((name: string, index: number, item: {\r\n            name: string;\r\n            value: string;\r\n        } & MarkerCfg) => MarkerCfg);\r\n        /**\r\n         * @title 是否进行分页\r\n         * @description **适用于分类图例**，当图例项过多时是否进行分页。\r\n         */\r\n        flipPage?: boolean;\r\n        /**\r\n         * @title 分页器的样式\r\n         * @description **适用于分类图例**，图例分页器的样式设置。\r\n         */\r\n        pageNavigator?: LegendPageNavigatorCfg;\r\n        /**\r\n         * @title 图例项\r\n         * @description **分类图例适用**，用户自己配置图例项的内容。\r\n         */\r\n        items?: LegendItem[];\r\n        /**\r\n         * @title 反选\r\n         * @description **分类图里适用**，用来配置正反选功能\r\n         */\r\n        radio?: LegendRadio;\r\n        /**\r\n         * @title 是否逆序\r\n         * @description **分类图例适用**，是否将图例项逆序展示。\r\n         */\r\n        reversed?: boolean;\r\n        /**\r\n         * @title 最小值\r\n         * @description **连续图例适用**，选择范围的最小值。\r\n         */\r\n        min?: number;\r\n        /**\r\n         * @title 最大\r\n         * @description **连续图例适用**，选择范围的最大值。\r\n         */\r\n        max?: number;\r\n        /**\r\n         * @title value\r\n         * @description **连续图例适用**，选择的值。\r\n         */\r\n        value?: number[];\r\n        /**\r\n         * @title 色块样式\r\n         * @description\r\n         * **连续图例适用**，选择范围的色块样式配置项。\r\n         * 属性结构如下：\r\n         *\r\n         * ```ts\r\n         * {\r\n         *   style?: ShapeAttrs; // 选定范围的样式\r\n         * }\r\n         * ```\r\n         *\r\n         * @link https://github.com/antvis/component/blob/81890719a431b3f9088e0c31c4d5d382ef0089df/src/types.ts#L574|ContinueLegendTrackCfg\r\n         */\r\n        track?: ContinueLegendTrackCfg;\r\n        /**\r\n         * @title 滑轨（背景\r\n         * @description\r\n         * **连续图例适用**，图例滑轨（背景）的样式配置项。\r\n         * 属性结构如下：\r\n         *\r\n         * ```ts\r\n         * {\r\n         *   type?: string; // rail 的类型，color, size\r\n         *   size?: number; // 滑轨的宽度\r\n         *   defaultLength?: number; // 滑轨的默认长度，，当限制了 maxWidth,maxHeight 时，不会使用这个属性会自动计算长度\r\n         *   style?: ShapeAttrs; // 滑轨的样式\r\n         * }\r\n         * ```\r\n         *\r\n         * @link https://github.com/antvis/component/blob/81890719a431b3f9088e0c31c4d5d382ef0089df/src/types.ts#L595|ContinueLegendRailCfg\r\n         */\r\n        rail?: ContinueLegendRailCfg;\r\n        /**\r\n         * @title 文本\r\n         * @description\r\n         * **连续图例适用**，文本的配置项。\r\n         * 属性结构如下：\r\n         *\r\n         * ```ts\r\n         * {\r\n         *   // 文本同滑轨的对齐方式，有五种类型\r\n         *   // rail ： 同滑轨对齐，在滑轨的两端\r\n         *   // top, bottom: 图例水平布局时有效\r\n         *   // left, right: 图例垂直布局时有效\r\n         *   align?: string;\r\n         *   spacing?: number; // 文本同滑轨的距离\r\n         *   style?: ShapeAttrs; // 文本样式\r\n         * }\r\n         * ```\r\n         * @link https://github.com/antvis/component/blob/81890719a431b3f9088e0c31c4d5d382ef0089df/src/types.ts#L618|ContinueLegendLabelCfg\r\n         */\r\n        label?: ContinueLegendLabelCfg;\r\n        /**\r\n         * @title 滑块\r\n         * @description\r\n         * **连续图例适用**，滑块的配置项。\r\n         * 属性结构如下：\r\n         *\r\n         * ```ts\r\n         * {\r\n         *   size?: number; // 滑块的大小\r\n         *   style?: ShapeAttrs; // 滑块的样式设置\r\n         * }\r\n         * ```\r\n         *\r\n         * @link https://github.com/antvis/component/blob/81890719a431b3f9088e0c31c4d5d382ef0089df/src/types.ts#L582|ContinueLegendTrackCfg\r\n         */\r\n        handler?: ContinueLegendHandlerCfg;\r\n        /**\r\n         * @title 是否可滑动\r\n         * @description **连续图例适用**，滑块是否可以滑动。\r\n         */\r\n        slidable?: boolean;\r\n        /**\r\n         * @title 图例 x 方向的偏移。\r\n         */\r\n        offsetX?: number;\r\n        /**\r\n         * @title 图例 y 方向的偏移。\r\n         */\r\n        offsetY?: number;\r\n        /**\r\n         * @title 图例在四个方向的偏移量\r\n         */\r\n        padding?: number[];\r\n        /**\r\n         * 图例高亮状态，false 表示默认置灰，无或 true 表示高亮\r\n         */\r\n        selected?: {\r\n            [key: string]: boolean;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @title Legend item 各个图例项的数据结构\r\n     */\r\n    declare interface LegendItem {\r\n        /**\r\n         * 唯一值，用于动画或者查找\r\n         */\r\n        id?: string;\r\n        /**\r\n         * @title 名称\r\n         */\r\n        name: string;\r\n        /**\r\n         * @title 值\r\n         */\r\n        value: any;\r\n        /**\r\n         * @title 图形标记\r\n         */\r\n        marker?: MarkerCfg | ((name: string, index: number, item: {\r\n            name: string;\r\n            value: string;\r\n        } & MarkerCfg) => MarkerCfg);\r\n        /**\r\n         * @title 初始是否处于未激活状态\r\n         */\r\n        unchecked?: boolean;\r\n    }\r\n\r\n    /**\r\n     * @title chart.legend() 参数类型\r\n     */\r\n    declare type LegendOption = LegendCfg | boolean;\r\n\r\n    declare interface Line {\r\n        readonly style?: ShapeAttrs;\r\n        readonly smooth?: boolean;\r\n    }\r\n\r\n    /**\r\n     * @title 使用 Line Annotation 组件的配置定义\r\n     */\r\n    declare interface LineOption extends RegionPositionBaseOption {\r\n        /**\r\n         * @title 文本配置定义\r\n         */\r\n        readonly text?: LineAnnotationTextCfg;\r\n    }\r\n\r\n    /**\r\n     * @title list 分面类型配置\r\n     */\r\n    declare interface ListCfg extends FacetCfg<ListData> {\r\n        /**\r\n         * @title 指定每行可显示分面的个数，超出时会自动换行。\r\n         */\r\n        readonly cols?: number;\r\n        /**\r\n         * @title 每个分面标题配置。\r\n         */\r\n        readonly title?: FacetTitle;\r\n    }\r\n\r\n    declare interface ListData extends FacetData {\r\n        readonly total?: number;\r\n    }\r\n\r\n    /**\r\n     * @title 通用对象\r\n     */\r\n    declare interface LooseObject {\r\n        [key: string]: any;\r\n    }\r\n\r\n    /**\r\n     * @title 用户数据经过图形映射处理后的数据结构\r\n     */\r\n    declare interface MappingDatum {\r\n        /**\r\n         * @title 原始数据\r\n         */\r\n        _origin: Datum;\r\n        /**\r\n         * @title shape 的关键点信息\r\n         */\r\n        points?: ShapeVertices;\r\n        /**\r\n         * @title 相对于当前 shape 的下一个 shape 的关键点信息\r\n         */\r\n        nextPoints?: ShapeVertices;\r\n        /**\r\n         * @title x 轴的坐标\r\n         */\r\n        x?: number[] | number;\r\n        /**\r\n         * @title y 轴的坐标\r\n         */\r\n        y?: number[] | number;\r\n        /**\r\n         * @title 颜色\r\n         */\r\n        color?: string;\r\n        /**\r\n         * @title 渲染的 shape 类型\r\n         */\r\n        shape?: string | string[];\r\n        /**\r\n         * @title 大小\r\n         */\r\n        size?: number;\r\n    }\r\n\r\n    /**\r\n     * @title 支持的 Marker 类型\r\n     */\r\n    declare type Marker = 'circle' | 'square' | 'diamond' | 'triangle' | 'triangle-down' | 'hexagon' | 'bowtie' | 'cross' | 'tick' | 'plus' | 'hyphen' | 'line';\r\n\r\n    /**\r\n     * @title 自定义 Marker 的回调函数定义\r\n     */\r\n    declare type MarkerCallback = (x: number, y: number, r: number) => PathCommand[];\r\n\r\n    /**\r\n     * @title Legend marker 的配置结构\r\n     */\r\n    declare interface MarkerCfg extends LegendMarkerCfg {\r\n        /**\r\n         * @title 配置图例 marker 的 symbol 形状。\r\n         */\r\n        symbol?: Marker | MarkerCallback;\r\n        style?: ShapeAttrs | ((style: ShapeAttrs) => ShapeAttrs);\r\n    }\r\n\r\n    /**\r\n     * @title matrix 分面类型配置\r\n     */\r\n    declare interface MatrixCfg extends FacetCfg<MirrorData> {\r\n        /**\r\n         * @title 列标题的样式\r\n         */\r\n        readonly columnTitle?: FacetTitle;\r\n        /**\r\n         * @title 列标题的样式\r\n         */\r\n        readonly rowTitle?: FacetTitle;\r\n    }\r\n\r\n    /**\r\n     * @title mirror 分面类型配置\r\n     */\r\n    declare interface MirrorCfg extends FacetCfg<MirrorData> {\r\n        /**\r\n         * @title 是否转置。\r\n         */\r\n        readonly transpose?: boolean;\r\n        /**\r\n         * @title 标题样式。\r\n         */\r\n        readonly title?: FacetTitle;\r\n    }\r\n\r\n    declare type MirrorData = FacetData;\r\n\r\n    declare type Option_2 = Record<string, AxisOption> | boolean;\r\n\r\n    /**\r\n     * @title 配置项声明式\r\n     */\r\n    declare interface Options {\r\n        /**\r\n         * @title 数据源配置。\r\n         */\r\n        readonly data?: Data;\r\n        /**\r\n         * @title 设置数据过滤条件，以 data 中的数据属性为 key。\r\n         */\r\n        readonly filters?: Record<string, FilterCondition>;\r\n        /**\r\n         * @title 坐标轴配置，以 data 中的数据属性为 key。\r\n         */\r\n        readonly axes?: Record<string, AxisOption> | boolean;\r\n        /**\r\n         * @title 图例配置，以 data 中的数据属性为 key。\r\n         */\r\n        readonly legends?: AllLegendsOptions;\r\n        /**\r\n         * @title 列定义配置，用于配置数值的类型等，以 data 中的数据属性为 key。\r\n         */\r\n        readonly scales?: Record<string, ScaleOption>;\r\n        /**\r\n         * @title Tooltip 配置。\r\n         */\r\n        readonly tooltip?: TooltipOption;\r\n        /**\r\n         * @title 坐标系配置。\r\n         */\r\n        readonly coordinate?: CoordinateOption;\r\n        /**\r\n         * @title 静态辅助元素声明。\r\n         */\r\n        readonly annotations?: (ArcOption | RegionFilterOption | ImageOption | LineOption | TextOption | RegionOption | DataMarkerOption | DataRegionOption)[];\r\n        /**\r\n         * @title Geometry 配置\r\n         */\r\n        readonly geometries?: GeometryOption[];\r\n        /**\r\n         * @title 开启/关闭动画，默认开启\r\n         */\r\n        readonly animate?: boolean;\r\n        /**\r\n         * @title 配置需要使用的交互行为\r\n         */\r\n        readonly interactions?: InteractionOption[];\r\n        /**\r\n         * @title 事件配置\r\n         */\r\n        readonly events?: EventCfg;\r\n        /**\r\n         * @title 缩略轴的配置\r\n         */\r\n        readonly slider?: SliderOption;\r\n        /**\r\n         * @title 滚动条配置\r\n         */\r\n        readonly scrollbar?: ScrollbarOption;\r\n        /**\r\n         * @title 子 View\r\n         */\r\n        readonly views?: ViewOption[];\r\n        /**\r\n         * @title 分面\r\n         */\r\n        readonly facets?: (RectCfg | MirrorCfg | CircleCfg | ListCfg | TreeCfg)[];\r\n        /**\r\n         * @title 其他自定义的 option\r\n         */\r\n        readonly [name: string]: any;\r\n    }\r\n\r\n    declare type Padding = [number, number, number, number];\r\n\r\n    /** @ignore */\r\n    declare class PaddingCal {\r\n        private top;\r\n        private right;\r\n        private bottom;\r\n        private left;\r\n        /**\r\n         * 使用静态方法创建一个\r\n         * @param top\r\n         * @param right\r\n         * @param bottom\r\n         * @param left\r\n         */\r\n        static instance(top?: number, right?: number, bottom?: number, left?: number): PaddingCal;\r\n        /**\r\n         * 初始的 padding 数据\r\n         * @param top\r\n         * @param right\r\n         * @param bottom\r\n         * @param left\r\n         */\r\n        constructor(top?: number, right?: number, bottom?: number, left?: number);\r\n        /**\r\n         * 取最大区间\r\n         * @param padding\r\n         */\r\n        max(padding: Padding): PaddingCal;\r\n        /**\r\n         * 四周增加 padding\r\n         * @param padding\r\n         */\r\n        shrink(padding: Padding): PaddingCal;\r\n        /**\r\n         * 在某一个方向增加 padding\r\n         * @param bbox\r\n         * @param direction\r\n         */\r\n        inc(bbox: BBox, direction: DIRECTION): PaddingCal;\r\n        /**\r\n         * 获得最终的 padding\r\n         */\r\n        getPadding(): Padding;\r\n        /**\r\n         * clone 一个 padding cal\r\n         */\r\n        clone(): PaddingCal;\r\n    }\r\n\r\n    declare type PaddingCalCtor = {\r\n        readonly instance: (top?: number, right?: number, bottom?: number, left?: number) => PaddingCal;\r\n    };\r\n\r\n    /**\r\n     * @title 一个点位置\r\n     */\r\n    declare interface Point {\r\n        readonly x: number;\r\n        readonly y: number;\r\n    }\r\n\r\n    /**\r\n     * @title 使用 PointPosition 定位的组件配置\r\n     */\r\n    declare interface PointPositionBaseOption extends AnnotationBaseOption {\r\n        /**\r\n         * @title Point 定位位置\r\n         */\r\n        readonly position: AnnotationPosition;\r\n    }\r\n\r\n    /**\r\n     * @title 带范围的点结构\r\n     */\r\n    declare interface RangePoint {\r\n        readonly x?: number | number[];\r\n        readonly y?: number | number[];\r\n    }\r\n\r\n    /**\r\n     * @title rect 分面类型配置\r\n     */\r\n    declare interface RectCfg extends FacetCfg<RectData> {\r\n        /**\r\n         * @title 行标题的样式。\r\n         */\r\n        readonly columnTitle?: FacetTitle;\r\n        /**\r\n         * @title 列标题的样式。\r\n         */\r\n        readonly rowTitle?: FacetTitle;\r\n    }\r\n\r\n    declare type RectData = FacetData;\r\n\r\n    /**\r\n     * @title 画布范围\r\n     */\r\n    declare interface Region {\r\n        readonly start: Point;\r\n        readonly end: Point;\r\n    }\r\n\r\n    /**\r\n     * @title 使用 RegionFilter Annotation 组件的配置定义\r\n     */\r\n    declare interface RegionFilterOption extends RegionPositionBaseOption {\r\n        /**\r\n         * @title 染色色值\r\n         */\r\n        readonly color: string;\r\n        /**\r\n         * @title 适用场景\r\n         * @description 可选,设定regionFilter只对特定geom类型起作用，如apply:['area']\r\n         */\r\n        readonly apply?: string[];\r\n    }\r\n\r\n    /**\r\n     * @title 使用 Region Annotation 组件的配置定义\r\n     */\r\n    declare type RegionOption = RegionPositionBaseOption;\r\n\r\n    /**\r\n     * @title 使用 RegionPosition 定位的组件配置\r\n     */\r\n    declare interface RegionPositionBaseOption extends AnnotationBaseOption {\r\n        /**\r\n         * @title 起始位置\r\n         */\r\n        readonly start: AnnotationPosition;\r\n        /**\r\n         * @title 结束位置\r\n         */\r\n        readonly end: AnnotationPosition;\r\n        /**\r\n         * @title 图形样式属性\r\n         */\r\n        readonly style?: ShapeAttrs;\r\n    }\r\n\r\n    /**\r\n     * @title 注册具体 shape 需要实现的接口。\r\n     */\r\n    declare interface RegisterShape {\r\n        /**\r\n         * @title 计算绘制需要的关键点，在注册具体的 shape 时由开发者自己定义。\r\n         */\r\n        readonly getPoints?: (pointInfo: ShapePoint) => Point[];\r\n        /**\r\n         * @title 获取 shape 对应的缩略图样式配置，在注册具体的 shape 时由开发者自己定义。\r\n         */\r\n        readonly getMarker?: (markerCfg: ShapeMarkerCfg) => ShapeMarkerAttrs;\r\n        /**\r\n         * @title 绘制函数。\r\n         */\r\n        readonly draw: (cfg: ShapeInfo, container: IGroup) => IShape | IGroup | void;\r\n    }\r\n\r\n    /**\r\n     * @title 注册 ShapeFactory 需要实现的接口。\r\n     */\r\n    declare interface RegisterShapeFactory {\r\n        /**\r\n         * @title 默认的 shape 类型。\r\n         */\r\n        readonly defaultShapeType: string;\r\n        /**\r\n         * @title 返回绘制 shape 所有的关键点集合。\r\n         */\r\n        readonly getDefaultPoints?: (pointInfo: ShapePoint) => Point[];\r\n        /**\r\n         * @title 获取 shape 的默认绘制样式\r\n         */\r\n        readonly getDefaultStyle?: (geometryTheme: LooseObject) => LooseObject;\r\n        /**\r\n         * @title 获取 shape 对应的缩略图配置。\r\n         */\r\n        readonly getMarker?: (shapeType: string, markerCfg: ShapeMarkerCfg) => ShapeMarkerAttrs;\r\n        /**\r\n         * @title 创建具体的 G.Shape 实例。\r\n         */\r\n        readonly drawShape?: (shapeType: string, cfg: ShapeInfo, container: IGroup) => IShape | IGroup;\r\n    }\r\n\r\n    /**\r\n     * @title G 的渲染类型\r\n     */\r\n    declare type Renderer = 'svg' | 'canvas';\r\n\r\n    /**\r\n     * @title 列定义配置项\r\n     */\r\n    declare interface ScaleOption extends ScaleConfig {\r\n        /**\r\n         * @title 声明度量类型。\r\n         */\r\n        type?: ScaleType;\r\n        /**\r\n         * @title 同步 scale\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * chart.scale({\r\n         *   x: { sync: true },\r\n         *   y: { sync: true },\r\n         *   x1: { sync: 'x1' },\r\n         *   x2: { sync: 'x1' },\r\n         * });\r\n         * ```\r\n         *\r\n         * 通过以上配置，我们会分别对 x 和 y 两个字段，x1 和 x2 两个字段进行同步度量操作。\r\n         */\r\n        sync?: boolean | string;\r\n        /**\r\n         * @title 是否显示最后的 tick\r\n         * @description 只对 `type: 'cat'` 以及 `type: 'time-cat'` 的 scale 生效，强制显示最后的日期 tick。\r\n         */\r\n        showLast?: boolean;\r\n        /**\r\n         * @title 唯一 ID\r\n         * @description\r\n         * 用于声明使用数据记录中的哪些字段来组成一条数据的唯一 id（如有多个字段，则使用 '-' 连接）。\r\n         * 数据 id 用于标识 Element 图形元素，应用于 Geometry 中的图形元素 Element 更新。\r\n         * 默认 G2 内部会有一套 ID 生成规则，如果不能满足用户需求，用户既可以使用该属性配置 id。\r\n         * @example\r\n         * 下面的例子中，声明了将 'x' 和 'y' 字段的数值来作为每条数据记录的 id，即下面数据两条数据的 id 分别为：'1-23' 和 '2-2'。\r\n         * ```ts\r\n         * const data = [\r\n         *   { x: 1, y: 23, z: 'a' },\r\n         *   { x: 2, y: 2, z: 'b' },\r\n         * ];\r\n         *\r\n         * chart.scale({\r\n         *   x: { key: true },\r\n         *   y: { key: true },\r\n         * });\r\n         * ```\r\n         */\r\n        key?: boolean;\r\n    }\r\n\r\n    /**\r\n     * @title G2 支持的度量类型\r\n     */\r\n    declare type ScaleType = 'linear' | 'cat' | 'category' | 'identity' | 'log' | 'pow' | 'time' | 'timeCat' | 'quantize' | 'quantile';\r\n\r\n    declare class Scrollbar extends Controller<ScrollbarOption> {\r\n        private scrollbar;\r\n        private container;\r\n        private trackLen;\r\n        private thumbLen;\r\n        private cnt;\r\n        private step;\r\n        private ratio;\r\n        private data;\r\n        private xScaleCfg;\r\n        private yScalesCfg;\r\n        private onChangeFn;\r\n        constructor(view: View);\r\n        get name(): string;\r\n        destroy(): void;\r\n        init(): void;\r\n        /**\r\n         * 渲染\r\n         */\r\n        render(): void;\r\n        /**\r\n         * 布局\r\n         */\r\n        layout(): void;\r\n        /**\r\n         * 更新\r\n         */\r\n        update(): void;\r\n        getComponents(): ComponentOption[];\r\n        clear(): void;\r\n        /** 设置滚动条位置  */\r\n        setValue(ratio: number): void;\r\n        /** 获得滚动条位置  */\r\n        getValue(): number;\r\n        /**\r\n         * 获取 scrollbar 的主题配置\r\n         */\r\n        private getThemeOptions;\r\n        /**\r\n         * 获取 scrollbar 组件的主题样式\r\n         */\r\n        private getScrollbarTheme;\r\n        private resetMeasure;\r\n        private onValueChange;\r\n        private measureScrollbar;\r\n        private getScrollRange;\r\n        private changeViewData;\r\n        private createScrollbar;\r\n        private updateScrollbar;\r\n        private getStep;\r\n        private getCnt;\r\n        private getScrollbarComponentCfg;\r\n        /**\r\n         * 填充一些默认的配置项目\r\n         */\r\n        private getValidScrollbarCfg;\r\n        /**\r\n         * 获取数据\r\n         */\r\n        private getScrollbarData;\r\n    }\r\n\r\n    /**\r\n     * @title 滚动条组件配置项\r\n     */\r\n    declare interface ScrollbarCfg {\r\n        /**\r\n         * @title 滚动条类型，默认 horizontal\r\n         */\r\n        type?: 'horizontal' | 'vertical';\r\n        /**\r\n         * @title 宽度，在 vertical 下生效\r\n         */\r\n        width?: number;\r\n        /**\r\n         * @title 高度，在 horizontal 下生效\r\n         */\r\n        height?: number;\r\n        /**\r\n         * @title 可选 padding\r\n         */\r\n        padding?: Padding;\r\n        /**\r\n         * @title 对应水平滚动条，为 X 轴每个分类字段的宽度；对于垂直滚动条，为 X 轴每个分类字段的高度\r\n         */\r\n        categorySize?: number;\r\n        /**\r\n         * @title 滚动的时候是否开启动画，默认跟随 view 中 animate 配置\r\n         */\r\n        animate?: boolean;\r\n        /**\r\n         * @title 主题样式设置, 暂不提供 hover 高亮滑块样式配置\r\n         */\r\n        style?: {\r\n            /**\r\n             * @title 滑道颜色\r\n             */\r\n            trackColor?: string;\r\n            /**\r\n             * @title 滑块颜色\r\n             */\r\n            thumbColor?: string;\r\n            /**\r\n             * @title 滑块高亮样式，对应主题的 hover.style.thumbColor\r\n             */\r\n            thumbHighlightColor?: string;\r\n            /**\r\n             * @title 是否圆角\r\n             */\r\n            lineCap?: string;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @title 滚动条配置\r\n     */\r\n    declare type ScrollbarOption = ScrollbarCfg | boolean;\r\n\r\n    /**\r\n     * @title Shape 接口定义。\r\n     */\r\n    declare interface Shape extends RegisterShape {\r\n        /**\r\n         * @title 坐标系对象。\r\n         */\r\n        coordinate: Coordinate;\r\n        /**\r\n         * @title 工具函数，将 0～1 path 转化成实际画布 path。\r\n         */\r\n        parsePath: (path: any) => PathCommand[];\r\n        /**\r\n         * @title 工具函数，0～1 的坐标点转换成实际画布坐标点。\r\n         */\r\n        parsePoint: (point: Point) => Point;\r\n        /**\r\n         * @title 工具函数，0～1 的坐标点集合转换成实际画布坐标点集合。\r\n         */\r\n        parsePoints: (points: Point[]) => Point[];\r\n    }\r\n\r\n    /**\r\n     * @title Shape Annotation 的配置\r\n     */\r\n    declare interface ShapeAnnotationOption extends AnnotationBaseOption {\r\n        /**\r\n         * @title 自定义 Annotation 绘制函数\r\n         */\r\n        render: (container: IGroup, view: View, helpers: {\r\n            parsePosition: (position: [string | number, string | number] | Datum) => Point;\r\n        }) => void;\r\n    }\r\n\r\n    /**\r\n     * @title geometry.shape() 图形属性回调函数定义\r\n     */\r\n    declare type ShapeAttrCallback = (...args: any[]) => string | any[];\r\n\r\n    /**\r\n     * @title ShapeFactory 接口定义。\r\n     */\r\n    declare interface ShapeFactory extends RegisterShapeFactory {\r\n        /**\r\n         * @title 工厂名。\r\n         */\r\n        geometryType: string;\r\n        /**\r\n         * @title 坐标系对象。\r\n         */\r\n        coordinate: Coordinate;\r\n        /**\r\n         * @title ShapeFactory 下所有的主题样式。\r\n         */\r\n        theme: LooseObject;\r\n        /**\r\n         * @title 根据名称获取具体的 shape 对象。\r\n         */\r\n        getShape: (shapeType: string | string[]) => Shape;\r\n        /**\r\n         * @title 获取构成 shape 的关键点。\r\n         */\r\n        getShapePoints: (shapeType: string | string[], pointInfo: ShapePoint) => Point[];\r\n    }\r\n\r\n    /**\r\n     * @title 绘制 Shape 需要的图形、样式、关键点等信息\r\n     */\r\n    declare interface ShapeInfo {\r\n        /**\r\n         * @title x 坐标\r\n         */\r\n        x: number | number[];\r\n        /**\r\n         * @title y 坐标\r\n         */\r\n        y: number | number[];\r\n        /**\r\n         * @title 映射的 shape 类型\r\n         */\r\n        shape?: string | string[];\r\n        /**\r\n         * @title size 映射值\r\n         */\r\n        size?: number;\r\n        /**\r\n         * @title 映射的颜色值\r\n         */\r\n        color?: string;\r\n        /**\r\n         * @title 用户设置的图形样式\r\n         */\r\n        style?: LooseObject;\r\n        /**\r\n         * @title 是否在极坐标下\r\n         */\r\n        isInCircle?: boolean;\r\n        /**\r\n         * @title 对应的原始数据记录\r\n         */\r\n        data?: Datum | Data;\r\n        /**\r\n         * @title 存储进行图形映射后的数据\r\n         */\r\n        mappingData?: MappingDatum | MappingDatum[];\r\n        /**\r\n         * @title 构成 shape 的关键点\r\n         */\r\n        points?: ShapeVertices;\r\n        /**\r\n         * @title 下一个数据集对应的关键点\r\n         */\r\n        nextPoints?: ShapeVertices;\r\n        /**\r\n         * @title Geometry.Text 需要\r\n         */\r\n        text?: string;\r\n        /**\r\n         * @title 数据是否发生层叠\r\n         */\r\n        isStack?: boolean;\r\n        /**\r\n         * @title 是否连接空值，只对 Path Line Area 这三种 Geometry 生效。\r\n         */\r\n        connectNulls?: boolean;\r\n        /**\r\n         * @title shape 背景，只对 Interval Geometry 生效，目前只对 interval-rect shape 生效。\r\n         */\r\n        background?: {\r\n            style?: ShapeAttrs;\r\n        };\r\n        /**\r\n         * @title 是否展示单个孤立的数据点，只对 Path Line Area 这三种 Geometry 生效。\r\n         */\r\n        showSinglePoint?: boolean;\r\n        /**\r\n         * @title 默认的 shape 样式\r\n         */\r\n        defaultStyle?: LooseObject;\r\n        /**\r\n         * @title 自定义的数据，传入到 shapeInfo 中\r\n         */\r\n        customInfo?: CustomOption;\r\n    }\r\n\r\n    /**\r\n     * @title 图形 marker 的配置信息。\r\n     */\r\n    declare interface ShapeMarkerAttrs {\r\n        /**\r\n         * @title marker 的形状。\r\n         */\r\n        symbol: string | ShapeMarkerSymbol;\r\n        /**\r\n         * @title marker 样式\r\n         * @description\r\n         * marker 的样式，`ShapeAttrs` 属性结构如下：\r\n         *\r\n         * ```ts\r\n         * {\r\n         *   // x 坐标\r\n         *   x?: number;\r\n         *   // y 坐标\r\n         *   y?: number;\r\n         *   // 圆半径\r\n         *   r?: number;\r\n         *   // 描边颜色\r\n         *   stroke?: string | null;\r\n         *   // 描边透明度\r\n         *   strokeOpacity?: number;\r\n         *   // 填充颜色\r\n         *   fill?: string | null;\r\n         *   // 填充透明度\r\n         *   fillOpacity?: number;\r\n         *   // 整体透明度\r\n         *   opacity?: number;\r\n         *   // 线宽\r\n         *   lineWidth?: number;\r\n         *   // 指定如何绘制每一条线段末端\r\n         *   lineCap?: 'butt' | 'round' | 'square';\r\n         *   // 用来设置2个长度不为0的相连部分（线段，圆弧，曲线）如何连接在一起的属性（长度为0的变形部分，其指定的末端和控制点在同一位置，会被忽略）\r\n         *   lineJoin?: 'bevel' | 'round' | 'miter';\r\n         *   // 设置线的虚线样式，可以指定一个数组。一组描述交替绘制线段和间距（坐标空间单位）长度的数字。 如果数组元素的数量是奇数，数组的元素会被复制并重复。例如， [5, 15, 25] 会变成 [5, 15, 25, 5, 15, 25]。这个属性取决于浏览器是否支持 setLineDash() 函数。\r\n         *   lineDash?: number[] | null;\r\n         *   // Path 路径\r\n         *   path?: string | object[];\r\n         *   // 图形坐标点\r\n         *   points?: object[];\r\n         *   // 宽度\r\n         *   width?: number;\r\n         *   // 高度\r\n         *   height?: number;\r\n         *   // 阴影模糊效果程度\r\n         *   shadowBlur?: number;\r\n         *   // 阴影颜色\r\n         *   shadowColor?: string | null;\r\n         *   // 阴影 x 方向偏移量\r\n         *   shadowOffsetX?: number;\r\n         *   // 阴影 y 方向偏移量\r\n         *   shadowOffsetY?: number;\r\n         *   // 设置文本内容的当前对齐方式\r\n         *   textAlign?: 'start' | 'center' | 'end' | 'left' | 'right';\r\n         *   // 设置在绘制文本时使用的当前文本基线\r\n         *   textBaseline?: 'top' | 'hanging' | 'middle' | 'alphabetic' | 'ideographic' | 'bottom';\r\n         *   // 字体样式\r\n         *   fontStyle?: 'normal' | 'italic' | 'oblique';\r\n         *   // 文本字体大小\r\n         *   fontSize?: number;\r\n         *   // 文本字体\r\n         *   fontFamily?: string;\r\n         *   // 文本粗细\r\n         *   fontWeight?: 'normal' | 'bold' | 'bolder' | 'lighter' | number;\r\n         *   // 字体变体\r\n         *   fontVariant?: 'normal' | 'small-caps' | string;\r\n         *   // 文本行高\r\n         *   lineHeight?: number;\r\n         *   [key: string]: any;\r\n         * }\r\n         * ```\r\n         *\r\n         * @link https://github.com/antvis/g/blob/28e3178b616573e0fa6d59694f1aaca2baaa9766/packages/g-base/src/types.ts#L37|ShapeAttrs\r\n         */\r\n        style: ShapeAttrs;\r\n    }\r\n\r\n    /**\r\n     * @title 获取 shape marker 时需要的信息\r\n     */\r\n    declare interface ShapeMarkerCfg {\r\n        /**\r\n         * @title 颜色。\r\n         */\r\n        color: string;\r\n        /**\r\n         * @title 是否是极坐标。\r\n         */\r\n        isInPolar: boolean;\r\n    }\r\n\r\n    /**\r\n     * @title 自定义 Shape marker 的函数\r\n     */\r\n    declare type ShapeMarkerSymbol = (x: number, y: number, r: number) => PathCommand[];\r\n\r\n    /**\r\n     * @title shape 关键点信息\r\n     */\r\n    declare interface ShapePoint {\r\n        /**\r\n         * @title 数据点映射后对应 x 的值。\r\n         */\r\n        readonly x: number | number[];\r\n        /**\r\n         * @title 数据点映射后对应 y 的值。\r\n         */\r\n        readonly y?: number | number[];\r\n        /**\r\n         * @title 数据在 y 方向的最小值。\r\n         */\r\n        readonly y0?: number;\r\n        /**\r\n         * @title 大小\r\n         */\r\n        size?: number;\r\n    }\r\n\r\n    declare type ShapeVertices = RangePoint[] | Point[] | Point[][];\r\n\r\n    /**\r\n     * @title geometry.size() 图形属性回调函数定义\r\n     */\r\n    declare type SizeAttrCallback = (...args: any[]) => number;\r\n\r\n    /**\r\n     * @ignore\r\n     * slider Controller\r\n     */\r\n    declare class Slider extends Controller<SliderOption> {\r\n        private slider;\r\n        private container;\r\n        private width;\r\n        private start;\r\n        private end;\r\n        private onChangeFn;\r\n        constructor(view: View);\r\n        get name(): string;\r\n        destroy(): void;\r\n        /**\r\n         * 初始化\r\n         */\r\n        init(): void;\r\n        /**\r\n         * 渲染\r\n         */\r\n        render(): void;\r\n        /**\r\n         * 布局\r\n         */\r\n        layout(): void;\r\n        /**\r\n         * 更新\r\n         */\r\n        update(): void;\r\n        /**\r\n         * 创建 slider 组件\r\n         */\r\n        private createSlider;\r\n        /**\r\n         * 更新配置\r\n         */\r\n        private updateSlider;\r\n        /**\r\n         * 进行测量操作\r\n         */\r\n        private measureSlider;\r\n        /**\r\n         * 清除测量\r\n         */\r\n        private resetMeasure;\r\n        /**\r\n         * 生成 slider 配置\r\n         */\r\n        private getSliderCfg;\r\n        /**\r\n         * 从 view 中获取数据，缩略轴使用全量的数据\r\n         */\r\n        private getData;\r\n        /**\r\n         * 获取 slider 的主题配置\r\n         */\r\n        private getThemeOptions;\r\n        /**\r\n         * 滑块滑动的时候出发\r\n         * @param v\r\n         */\r\n        private onValueChange;\r\n        /**\r\n         * 根据 start/end 和当前数据计算出当前的 minText/maxText\r\n         * @param min\r\n         * @param max\r\n         */\r\n        private getMinMaxText;\r\n        /**\r\n         * 更新 view 过滤数据\r\n         * @param min\r\n         * @param max\r\n         */\r\n        private changeViewData;\r\n        /**\r\n         * 覆写父类方法\r\n         */\r\n        getComponents(): ComponentOption[];\r\n        /**\r\n         * 覆盖父类\r\n         */\r\n        clear(): void;\r\n    }\r\n\r\n    declare interface SliderCfg {\r\n        /**\r\n         * @title slider 高度\r\n         */\r\n        readonly height?: number;\r\n        /**\r\n         * @title 滑块背景区域配置\r\n         */\r\n        readonly trendCfg?: Omit<TrendCfg, 'data'> & {\r\n            data?: number[];\r\n        };\r\n        /**\r\n         * @title 滑块背景样式\r\n         */\r\n        readonly backgroundStyle?: any;\r\n        /**\r\n         * @title 滑块前景样式\r\n         */\r\n        readonly foregroundStyle?: any;\r\n        /**\r\n         * @title 滑块两个操作块样式\r\n         */\r\n        readonly handlerStyle?: any;\r\n        /**\r\n         * @title 文本样式\r\n         */\r\n        readonly textStyle?: any;\r\n        /**\r\n         * @title 允许滑动位置的最小值\r\n         */\r\n        readonly minLimit?: number;\r\n        /**\r\n         * @title 允许滑动位置的最大值\r\n         */\r\n        readonly maxLimit?: number;\r\n        /**\r\n         * @title 滑块初始化的起始位置\r\n         */\r\n        readonly start?: number;\r\n        /**\r\n         * @title 滑块初始化的结束位置\r\n         */\r\n        readonly end?: number;\r\n        /**\r\n         * @title 布局的 padding\r\n         */\r\n        readonly padding?: number[];\r\n        /**\r\n         * @title 滑块文本格式化函数\r\n         */\r\n        formatter?: (val: any, datum: Datum, idx: number) => any;\r\n    }\r\n\r\n    /**\r\n     * 缩略轴的配置项\r\n     */\r\n    declare type SliderOption = SliderCfg | boolean;\r\n\r\n    /**\r\n     * @title Geometry 下每个 state 的配置结构\r\n     */\r\n    declare interface StateCfg {\r\n        /**\r\n         * @title 状态样式配置。\r\n         */\r\n        style?: object | StateStyleCallback;\r\n    }\r\n\r\n    /**\r\n     * @title geometry.state({}) 配置定义\r\n     */\r\n    declare interface StateOption {\r\n        /**\r\n         * @title 默认状态样式。\r\n         */\r\n        default?: StateCfg;\r\n        /**\r\n         * @title active 状态配置。\r\n         */\r\n        active?: StateCfg;\r\n        /**\r\n         * @title inactive 状态配置。\r\n         */\r\n        inactive?: StateCfg;\r\n        /**\r\n         * @title selected 状态配置。\r\n         */\r\n        selected?: StateCfg;\r\n    }\r\n\r\n    /**\r\n     * @title state 下 style 回调函数定义\r\n     */\r\n    declare type StateStyleCallback = (element: Element_2) => LooseObject;\r\n\r\n    /**\r\n     * @title geometry.style() 接口回调函数定义\r\n     */\r\n    declare type StyleCallback = (...args: any[]) => LooseObject;\r\n\r\n    /**\r\n     * @title `geometry.style({})` 样式配置定义\r\n     */\r\n    declare interface StyleOption {\r\n        /**\r\n         * @title 映射的字段。\r\n         */\r\n        readonly fields?: string[];\r\n        /**\r\n         * @title 回调函数。\r\n         */\r\n        readonly callback?: (...args: any[]) => LooseObject;\r\n        /**\r\n         * @title 图形样式配置。\r\n         */\r\n        readonly cfg?: LooseObject;\r\n    }\r\n\r\n    declare type SyncViewPaddingFn = (chart: View, views: View[], PC: PaddingCalCtor) => void;\r\n\r\n    /**\r\n     * @title 使用 Text Annotation 组件的配置定义\r\n     */\r\n    declare interface TextOption extends PointPositionBaseOption, Omit<EnhancedTextCfg, 'content'> {\r\n        content?: string | number | ((filteredData: object[]) => string | number);\r\n    }\r\n\r\n    /** @ignore */\r\n    declare class Tooltip extends Controller<TooltipOption> {\r\n        private tooltip;\r\n        private tooltipMarkersGroup;\r\n        private tooltipCrosshairsGroup;\r\n        private xCrosshair;\r\n        private yCrosshair;\r\n        private guideGroup;\r\n        private isLocked;\r\n        private items;\r\n        private title;\r\n        private point;\r\n        get name(): string;\r\n        init(): void;\r\n        private isVisible;\r\n        render(): void;\r\n        /**\r\n         * Shows tooltip\r\n         * @param point\r\n         */\r\n        showTooltip(point: Point): void;\r\n        hideTooltip(): void;\r\n        /**\r\n         * lockTooltip\r\n         */\r\n        lockTooltip(): void;\r\n        /**\r\n         * unlockTooltip\r\n         */\r\n        unlockTooltip(): void;\r\n        /**\r\n         * isTooltipLocked\r\n         */\r\n        isTooltipLocked(): boolean;\r\n        clear(): void;\r\n        destroy(): void;\r\n        reset(): void;\r\n        changeVisible(visible: boolean): void;\r\n        getTooltipItems(point: Point): any[];\r\n        layout(): void;\r\n        update(): void;\r\n        /**\r\n         * 当前鼠标点是在 enter tooltip 中\r\n         * @param point\r\n         */\r\n        isCursorEntered(point: Point): boolean;\r\n        getTooltipCfg(): any;\r\n        protected processCustomContent(option: TooltipOption): TooltipOption;\r\n        private getTitle;\r\n        private renderTooltip;\r\n        private renderTooltipMarkers;\r\n        private renderCrosshairs;\r\n        private renderXCrosshairs;\r\n        private renderYCrosshairs;\r\n        private getCrosshairsText;\r\n        private getGuideGroup;\r\n        private getTooltipMarkersGroup;\r\n        private getTooltipCrosshairsGroup;\r\n        private findItemsFromView;\r\n        private getViewWithGeometry;\r\n        /**\r\n         * 根据用户配置的 items 配置，来进行用户自定义的处理，并返回最终的 items\r\n         * 默认不做任何处理\r\n         */\r\n        private getItemsAfterProcess;\r\n    }\r\n\r\n    /**\r\n     * @title geometry.tooltip() 接口回调函数定义\r\n     */\r\n    declare type TooltipCallback = (...args: any[]) => LooseObject;\r\n\r\n    /**\r\n     * @title chart.tooltip() 接口配置属性\r\n     */\r\n    declare interface TooltipCfg {\r\n        /**\r\n         * @title 设置 tooltip 内容框是否跟随鼠标移动。\r\n         * @description 默认为 true，跟随鼠标移动，false 则固定位置不随鼠标移动。\r\n         * @default true\r\n         */\r\n        follow?: boolean;\r\n        /**\r\n         * @title tooltip 是否允许鼠标滑入\r\n         * @default false\r\n         */\r\n        enterable?: boolean;\r\n        /**\r\n         * @title tooltip 显示延迟（ms）\r\n         * @description 默认为 16ms，建议在 enterable = true 的时候才设置\r\n         * @default \"16ms\"\r\n         */\r\n        showDelay?: number;\r\n        /**\r\n         * @title 是否展示 tooltip 标题。\r\n         */\r\n        showTitle?: boolean;\r\n        /**\r\n         * @title 标题\r\n         * @description\r\n         * 设置 tooltip 的标题内容：如果值为数据字段名，则会展示数据中对应该字段的数值，如果数据中不存在该字段，则直接展示 title 值。\r\n         * 同时支持传入方法，回调的方式返回字符串\r\n         */\r\n        title?: TooltipTitle;\r\n        /**\r\n         * @title 设置 tooltip 的固定展示位置，相对于数据点。\r\n         */\r\n        position?: 'top' | 'bottom' | 'left' | 'right';\r\n        /**\r\n         * @title 是否合并当前点对应的所有数据\r\n         * @description true 表示合并当前点对应的所有数据并展示，false 表示只展示离当前点最逼近的数据内容。\r\n         */\r\n        shared?: boolean;\r\n        /**\r\n         * @title 是否展示 crosshairs。\r\n         */\r\n        showCrosshairs?: boolean;\r\n        /**\r\n         * @title 交叉线\r\n         * @description 配置 tooltip 的 crosshairs，当且仅当 `showCrosshairs` 为 true 时生效。\r\n         */\r\n        crosshairs?: TooltipCrosshairs;\r\n        /**\r\n         * @title 是否渲染 tooltipMarkers。\r\n         */\r\n        showMarkers?: boolean;\r\n        /**\r\n         * @title tooltipMarker 的样式配置。\r\n         */\r\n        marker?: object;\r\n        /**\r\n         * @title 是否展示 tooltip 内容框\r\n         */\r\n        showContent?: boolean | ((datum: Datum) => boolean);\r\n        /**\r\n         * @title 自定义 tooltip 的容器。\r\n         */\r\n        container?: string | HTMLElement;\r\n        /**\r\n         * @title 图例容器的模板\r\n         * @description 用于指定图例容器的模板，自定义模板时必须包含各个 dom 节点的 class。\r\n         */\r\n        containerTpl?: string;\r\n        /**\r\n         * @title 默认模板\r\n         * @description 每项记录的默认模板，自定义模板时必须包含各个 dom 节点的 class。\r\n         */\r\n        itemTpl?: string;\r\n        /**\r\n         * @title dom 样式\r\n         * @description 传入各个 dom 的样式。\r\n         */\r\n        domStyles?: TooltipDomStyles;\r\n        /**\r\n         * @title tooltip 偏移量。\r\n         */\r\n        offset?: number;\r\n        /**\r\n         * @title 是否将 tooltip items 逆序\r\n         */\r\n        reversed?: boolean;\r\n        /**\r\n         * @title 是否显示空值的 tooltip 项目\r\n         */\r\n        showNil?: boolean;\r\n        /**\r\n         * @description 在 tooltip 渲染之前，对最终的 items 进行自定义处理（比如排序、过滤、格式化等）\r\n         */\r\n        customItems?: (originalItems: TooltipItem[]) => TooltipItem[];\r\n        /**\r\n         * @title 自定义模板\r\n         */\r\n        customContent?: (title: string, data: any[]) => string | HTMLElement;\r\n    }\r\n\r\n    /**\r\n     * @title Tooltip crosshairs 配置结构\r\n     */\r\n    declare interface TooltipCrosshairs {\r\n        /**\r\n         * @title 类型\r\n         * @description\r\n         * crosshairs 的类型: `x` 表示 x 轴上的辅助线，`y` 表示 y 轴上的辅助项。\r\n         * 以下是在不同坐标系下，crosshairs 各个类型的表现：\r\n         *\r\n         * | 坐标系 | type = 'x' | type = 'xy' | type = 'y' |\r\n         * | ------------ | ------------- | ------------- |\r\n         * | 直角坐标系  | ![image](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*jmUBQ4nbtXsAAAAAAAAAAABkARQnAQ) | ![image](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*RpWXT76ZSQgAAAAAAAAAAABkARQnAQ) | ![image](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*Xjl8TLIJLuUAAAAAAAAAAABkARQnAQ) |\r\n         * | 极坐标 | ![image](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*zbMVSoKTyFsAAAAAAAAAAABkARQnAQ) | ![image](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*k5EYRJspET0AAAAAAAAAAABkARQnAQ) | ![image](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*n_TKQpUaXWEAAAAAAAAAAABkARQnAQ) |\r\n         */\r\n        type?: 'x' | 'y' | 'xy';\r\n        /**\r\n         * @title 辅助线的样式配置。\r\n         * @description\r\n         * 属性结构如下：\r\n         *\r\n         * ```ts\r\n         * {\r\n         *   style?: ShapeAttrs; // 线的样式配置\r\n         * }\r\n         * ```\r\n         *\r\n         * @link https://github.com/antvis/component/blob/81890719a431b3f9088e0c31c4d5d382ef0089df/src/types.ts#L1177|CrosshairLineCfg\r\n         */\r\n        line?: CrosshairLineCfg;\r\n        /**\r\n         * @title 文本\r\n         * @description 辅助线文本配置，支持回调。\r\n         */\r\n        text?: TooltipCrosshairsText | TooltipCrosshairsTextCallback;\r\n        /**\r\n         * @title 辅助线文本背景配置。\r\n         * @description\r\n         * 属性结构如下：\r\n         *\r\n         * ```ts\r\n         * {\r\n         *   padding?: number | number[]; // 文本背景周围的留白\r\n         *   style?: ShapeAttrs; // 文本背景的样式\r\n         * }\r\n         * ```\r\n         *\r\n         * @link https://github.com/antvis/component/blob/81890719a431b3f9088e0c31c4d5d382ef0089df/src/types.ts#L1185|CrosshairTextBackgroundCfg\r\n         */\r\n        textBackground?: CrosshairTextBackgroundCfg;\r\n        /**\r\n         * @title 辅助线是否跟随鼠标移动\r\n         * @description 即定位到数据点\r\n         * @default false\r\n         */\r\n        follow?: boolean;\r\n    }\r\n\r\n    /**\r\n     * Tooltip Crosshairs 的文本数据结构。\r\n     */\r\n    declare interface TooltipCrosshairsText extends CrosshairTextCfg {\r\n        /**\r\n         * @title crosshairs 文本内容\r\n         */\r\n        content?: string;\r\n    }\r\n\r\n    /**\r\n     * 辅助线文本回调函数\r\n     * @param type 对应当前 crosshairs 的类型，值为 'x' 或者 'y'\r\n     * @param defaultContent 对应当前 crosshairs 默认的文本内容\r\n     * @param items 对应当前 tooltip 内容框中的数据\r\n     * @param currentPoint 对应当前坐标点\r\n     * @returns 返回当前 crosshairs 对应的辅助线文本配置\r\n     */\r\n    declare type TooltipCrosshairsTextCallback = (type: string, defaultContent: any, items: any[], currentPoint: Point) => TooltipCrosshairsText;\r\n\r\n    /**\r\n     * @title Tooltip 内容框的 css 样式定义\r\n     */\r\n    declare interface TooltipDomStyles {\r\n        'g2-tooltip'?: LooseObject;\r\n        'g2-tooltip-title'?: LooseObject;\r\n        'g2-tooltip-list'?: LooseObject;\r\n        'g2-tooltip-list-item'?: LooseObject;\r\n        'g2-tooltip-marker'?: LooseObject;\r\n        'g2-tooltip-value'?: LooseObject;\r\n        'g2-tooltip-name'?: LooseObject;\r\n    }\r\n\r\n    declare type TooltipItem = {\r\n        /**\r\n         * @title 原始数据\r\n         */\r\n        readonly data: Datum;\r\n        /**\r\n         * @title 映射之后的数据\r\n         */\r\n        readonly mappingData: Datum;\r\n        /**\r\n         * @title tooltip item 中名称\r\n         */\r\n        readonly name: string;\r\n        /**\r\n         * @title tooltip item 中值\r\n         */\r\n        readonly value: string | number;\r\n        /**\r\n         * @title tooltip item 中颜色\r\n         */\r\n        readonly color: string;\r\n        /**\r\n         * @title tooltip item 中图标类型\r\n         */\r\n        readonly marker: string;\r\n    };\r\n\r\n    /**\r\n     * @title chart.tooltip() 参数类型\r\n     */\r\n    declare type TooltipOption = TooltipCfg | boolean;\r\n\r\n    declare type TooltipTitle = string | ((title: string, datum: Datum) => string);\r\n\r\n    /**\r\n     * @title tree 分面类型配置\r\n     */\r\n    declare interface TreeCfg extends FacetCfg<TreeData> {\r\n        readonly line?: Line;\r\n        readonly title?: FacetTitle;\r\n    }\r\n\r\n    declare interface TreeData extends FacetData {\r\n        children?: TreeData[];\r\n        originColIndex?: number;\r\n    }\r\n\r\n    /**\r\n     * G2 视图 View 类\r\n     */\r\n    declare class View extends Base {\r\n        /** view id，全局唯一。 */\r\n        id: string;\r\n        /** 父级 view，如果没有父级，则为空。 */\r\n        parent: View;\r\n        /** 所有的子 view。 */\r\n        views: View[];\r\n        /** 所有的 geometry 实例。 */\r\n        geometries: Geometry[];\r\n        /** 所有的组件 controllers。 */\r\n        controllers: Controller[];\r\n        /** 所有的 Interaction 实例。 */\r\n        interactions: Record<string, Interaction>;\r\n        /** view 区域空间。 */\r\n        viewBBox: BBox_2;\r\n        /** 坐标系的位置大小，ViewBBox - padding = coordinateBBox。 */\r\n        coordinateBBox: BBox_2;\r\n        /** view 的 padding 大小，传入的配置（不是解析之后的值）。 */\r\n        padding: ViewPadding;\r\n        /** padding的基础上增加的调整值 */\r\n        appendPadding: ViewAppendPadding;\r\n        /** G.Canvas 实例。 */\r\n        canvas: ICanvas;\r\n        /** 存储最终计算的 padding 结果 */\r\n        autoPadding: PaddingCal;\r\n        /** 三层 Group 图形中的背景层。 */\r\n        backgroundGroup: IGroup;\r\n        /** 三层 Group 图形中的中间层。 */\r\n        middleGroup: IGroup;\r\n        /** 三层 Group 图形中的前景层。 */\r\n        foregroundGroup: IGroup;\r\n        /** 是否对超出坐标系范围的 Geometry 进行剪切 */\r\n        limitInPlot: boolean;\r\n        /**\r\n         * 标记 view 的大小位置范围，均是 0 ~ 1 范围，便于开发者使用，起始点为左上角。\r\n         */\r\n        protected region: Region;\r\n        /** 主题配置，存储当前主题配置。 */\r\n        protected themeObject: LooseObject;\r\n        protected options: Options;\r\n        /** 过滤之后的数据 */\r\n        protected filteredData: Data;\r\n        /** 配置开启的组件插件，默认为全局配置的组件。 */\r\n        private usedControllers;\r\n        /** 所有的 scales */\r\n        private scalePool;\r\n        /** 布局函数 */\r\n        protected layoutFunc: Layout;\r\n        /** 生成的坐标系实例，{@link https://github.com/antvis/coord/blob/master/src/coord/base.ts|Coordinate} */\r\n        protected coordinateInstance: Coordinate;\r\n        /** Coordinate 相关的控制器类，负责坐标系实例的创建、更新、变换等 */\r\n        protected coordinateController: CoordinateController;\r\n        /** 分面类实例 */\r\n        protected facetInstance: Facet;\r\n        /** 当前鼠标是否在 plot 内（CoordinateBBox） */\r\n        private isPreMouseInPlot;\r\n        /** 默认标识位，用于判定数据是否更新 */\r\n        private isDataChanged;\r\n        /** 用于判断坐标系范围是否发生变化的标志位 */\r\n        private isCoordinateChanged;\r\n        /** 从当前这个 view 创建的 scale key */\r\n        private createdScaleKeys;\r\n        /** 背景色样式的 shape */\r\n        private backgroundStyleRectShape;\r\n        /** 是否同步子 view 的 padding */\r\n        private syncViewPadding;\r\n        constructor(props: ViewCfg);\r\n        /**\r\n         * 设置 layout 布局函数\r\n         * @param layout 布局函数\r\n         * @returns void\r\n         */\r\n        setLayout(layout: Layout): void;\r\n        /**\r\n         * 生命周期：初始化\r\n         * @returns voids\r\n         */\r\n        init(): void;\r\n        /**\r\n         * 生命周期：渲染流程，渲染过程需要处理数据更新的情况。\r\n         * render 函数仅仅会处理 view 和子 view。\r\n         * @param isUpdate 是否触发更新流程。\r\n         * @param params render 事件参数\r\n         */\r\n        render(isUpdate?: boolean, payload?: EventPayload): void;\r\n        /**\r\n         * 生命周期：清空图表上所有的绘制内容，但是不销毁图表，chart 仍可使用。\r\n         * @returns void\r\n         */\r\n        clear(): void;\r\n        /**\r\n         * 生命周期：销毁，完全无法使用。\r\n         * @returns void\r\n         */\r\n        destroy(): void;\r\n        /**\r\n         * 显示或者隐藏整个 view。\r\n         * @param visible 是否可见\r\n         * @returns View\r\n         */\r\n        changeVisible(visible: boolean): View;\r\n        /**\r\n         * 装载数据源。\r\n         *\r\n         * ```ts\r\n         * view.data([{ city: '杭州', sale: 100 }, { city: '上海', sale: 110 } ]);\r\n         * ```\r\n         *\r\n         * @param data 数据源，json 数组。\r\n         * @returns View\r\n         */\r\n        data(data: Data): View;\r\n        /**\r\n         * @deprecated\r\n         * This method will be removed at G2 V4.1. Replaced by {@link #data(data)}\r\n         */\r\n        source(data: Data): View;\r\n        /**\r\n         * 设置数据筛选规则。\r\n         *\r\n         * ```ts\r\n         * view.filter('city', (value: any, datum: Datum) => value !== '杭州');\r\n         *\r\n         * // 删除 'city' 字段对应的筛选规则。\r\n         * view.filter('city', null);\r\n         * ```\r\n         *\r\n         * @param field 数据字段\r\n         * @param condition 筛选规则\r\n         * @returns View\r\n         */\r\n        filter(field: string, condition: FilterCondition | null): View;\r\n        /**\r\n         * 开启或者关闭坐标轴。\r\n         *\r\n         * ```ts\r\n         *  view.axis(false); // 不展示坐标轴\r\n         * ```\r\n         * @param field 坐标轴开关\r\n         */\r\n        axis(field: boolean): View;\r\n        /**\r\n         * 对特定的某条坐标轴进行配置。\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * view.axis('city', false); // 不展示 'city' 字段对应的坐标轴\r\n         *\r\n         * // 将 'city' 字段对应的坐标轴的标题隐藏\r\n         * view.axis('city', {\r\n         *   title: null,\r\n         * });\r\n         * ```\r\n         *\r\n         * @param field 要配置的坐标轴对应的字段名称\r\n         * @param axisOption 坐标轴具体配置，更详细的配置项可以参考：https://github.com/antvis/component#axis\r\n         */\r\n        axis(field: string, axisOption: AxisOption): View;\r\n        /**\r\n         * 对图例进行整体配置。\r\n         *\r\n         * ```ts\r\n         * view.legend(false); // 关闭图例\r\n         *\r\n         * view.legend({\r\n         *   position: 'right',\r\n         * }); // 图例进行整体配置\r\n         * ```\r\n         * @param field\r\n         * @returns View\r\n         */\r\n        legend(field: LegendOption): View;\r\n        /**\r\n         * 对特定的图例进行配置。\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * view.legend('city', false); // 关闭某个图例，通过数据字段名进行关联\r\n         *\r\n         * // 对特定的图例进行配置\r\n         * view.legend('city', {\r\n         *   position: 'right',\r\n         * });\r\n         * ```\r\n         *\r\n         * @param field 图例对应的数据字段名称\r\n         * @param legendOption 图例配置，更详细的配置项可以参考：https://github.com/antvis/component#axis\r\n         * @returns View\r\n         */\r\n        legend(field: string, legendOption: LegendOption): View;\r\n        /**\r\n         * 批量设置 scale 配置。\r\n         *\r\n         * ```ts\r\n         * view.scale({\r\n         *   sale: {\r\n         *     min: 0,\r\n         *     max: 100,\r\n         *   }\r\n         * });\r\n         * ```\r\n         * Scale 的详细配置项可以参考：https://github.com/antvis/scale#api\r\n         * @returns View\r\n         */\r\n        scale(field: Record<string, ScaleOption>): View;\r\n        /**\r\n         * 为特性的数据字段进行 scale 配置。\r\n         *\r\n         * ```ts\r\n         * view.scale('sale', {\r\n         *   min: 0,\r\n         *   max: 100,\r\n         * });\r\n         * ```\r\n         *\r\n         * @returns View\r\n         */\r\n        scale(field: string, scaleOption: ScaleOption): View;\r\n        /**\r\n         * tooltip 提示信息配置。\r\n         *\r\n         * ```ts\r\n         * view.tooltip(false); // 关闭 tooltip\r\n         *\r\n         * view.tooltip({\r\n         *   shared: true\r\n         * });\r\n         * ```\r\n         *\r\n         * @param cfg Tooltip 配置，更详细的配置项参考：https://github.com/antvis/component#tooltip\r\n         * @returns View\r\n         */\r\n        tooltip(cfg: boolean | TooltipOption): View;\r\n        /**\r\n         * 辅助标记配置。\r\n         *\r\n         * ```ts\r\n         * view.annotation().line({\r\n         *   start: ['min', 85],\r\n         *   end: ['max', 85],\r\n         *   style: {\r\n         *     stroke: '#595959',\r\n         *     lineWidth: 1,\r\n         *     lineDash: [3, 3],\r\n         *   },\r\n         * });\r\n         * ```\r\n         * 更详细的配置项：https://github.com/antvis/component#annotation\r\n         * @returns [[Annotation]]\r\n         */\r\n        annotation(): Annotation;\r\n        /**\r\n         * @deprecated\r\n         * This method will be removed at G2 V4.1. Replaced by {@link #guide()}\r\n         */\r\n        guide(): Annotation;\r\n        /**\r\n         * 坐标系配置。\r\n         *\r\n         * @example\r\n         * ```ts\r\n         * view.coordinate({\r\n         *   type: 'polar',\r\n         *   cfg: {\r\n         *     radius: 0.85,\r\n         *   },\r\n         *   actions: [\r\n         *     [ 'transpose' ],\r\n         *   ],\r\n         * });\r\n         * ```\r\n         *\r\n         * @param option\r\n         * @returns\r\n         */\r\n        coordinate(option?: CoordinateOption): CoordinateController;\r\n        /**\r\n         * 声明坐标系类型，并进行配置。\r\n         *\r\n         * ```ts\r\n         * // 直角坐标系，并进行转置变换\r\n         * view.coordinate('rect').transpose();\r\n         *\r\n         * // 默认创建直角坐标系\r\n         * view.coordinate();\r\n         * ```\r\n         *\r\n         * @param type 坐标系类型\r\n         * @param [coordinateCfg] 坐标系配置\r\n         * @returns\r\n         */\r\n        coordinate(type: string, coordinateCfg?: CoordinateCfg): CoordinateController;\r\n        /**\r\n         * @deprecated\r\n         * This method will be removed at G2 V4.1. Replaced by {@link #coordinate()}\r\n         */\r\n        coord(type: string | CoordinateOption, coordinateCfg?: CoordinateCfg): CoordinateController;\r\n        /**\r\n         * view 分面绘制。\r\n         *\r\n         * ```ts\r\n         * view.facet('rect', {\r\n         *   rowField: 'province',\r\n         *   columnField: 'category',\r\n         *   eachView: (innerView: View, facet?: FacetData) => {\r\n         *     innerView.line().position('city*sale');\r\n         *   },\r\n         * });\r\n         * ```\r\n         *\r\n         * @param type 分面类型\r\n         * @param cfg 分面配置， [[FacetCfgMap]]\r\n         * @returns View\r\n         */\r\n        facet<T extends keyof FacetCfgMap>(type: T, cfg: FacetCfgMap[T]): View;\r\n        animate(status: boolean): View;\r\n        /**\r\n         * 更新配置项，用于配置项式声明。\r\n         * @param options 配置项\r\n         */\r\n        updateOptions(options: Options): this;\r\n        /**\r\n         * 往 `view.options` 属性中存储配置项。\r\n         * @param name 属性名称\r\n         * @param opt 属性值\r\n         * @returns view\r\n         */\r\n        option(name: string, opt: any): View;\r\n        /**\r\n         * 设置主题。\r\n         *\r\n         * ```ts\r\n         * view.theme('dark'); // 'dark' 需要事先通过 `registerTheme()` 接口注册完成\r\n         *\r\n         * view.theme({ defaultColor: 'red' });\r\n         * ```\r\n         *\r\n         * @param theme 主题名或者主题配置\r\n         * @returns View\r\n         */\r\n        theme(theme: string | LooseObject): View;\r\n        /**\r\n         * Call the interaction based on the interaction name\r\n         *\r\n         * ```ts\r\n         * view.interaction('my-interaction', { extra: 'hello world' });\r\n         * ```\r\n         * 详细文档可以参考：https://g2.antv.vision/zh/docs/api/general/interaction\r\n         * @param name interaction name\r\n         * @param cfg interaction config\r\n         * @returns\r\n         */\r\n        interaction(name: string, cfg?: LooseObject): View;\r\n        /**\r\n         * 移除当前 View 的 interaction\r\n         * ```ts\r\n         * view.removeInteraction('my-interaction');\r\n         * ```\r\n         * @param name interaction name\r\n         */\r\n        removeInteraction(name: string): void;\r\n        /**\r\n         * 修改数据，数据更新逻辑，数据更新仅仅影响当前这一层的 view\r\n         *\r\n         * ```ts\r\n         * view.changeData([{ city: '北京', sale: '200' }]);\r\n         * ```\r\n         *\r\n         * @param data\r\n         * @returns void\r\n         */\r\n        changeData(data: Data): void;\r\n        /**\r\n         * 创建子 view\r\n         *\r\n         * ```ts\r\n         * const innerView = view.createView({\r\n         *   start: { x: 0, y: 0 },\r\n         *   end: { x: 0.5, y: 0.5 },\r\n         *   padding: 8,\r\n         * });\r\n         * ```\r\n         *\r\n         * @param cfg\r\n         * @returns View\r\n         */\r\n        createView(cfg?: Partial<ViewCfg>): View;\r\n        /**\r\n         * @deprecated\r\n         * This method will be removed at G2 V4.1. Replaced by {@link #createView()}\r\n         */\r\n        view(cfg?: Partial<ViewCfg>): View;\r\n        /**\r\n         * 删除一个子 view\r\n         * @param view\r\n         * @return removedView\r\n         */\r\n        removeView(view: View): View;\r\n        /**\r\n         * 获取当前坐标系实例。\r\n         * @returns [[Coordinate]]\r\n         */\r\n        getCoordinate(): Coordinate;\r\n        /**\r\n         * 获取当前 view 的主题配置。\r\n         * @returns themeObject\r\n         */\r\n        getTheme(): LooseObject;\r\n        /**\r\n         * 获得 x 轴字段的 scale 实例。\r\n         * @returns view 中 Geometry 对于的 x scale\r\n         */\r\n        getXScale(): Scale;\r\n        /**\r\n         * 获取 y 轴字段的 scales 实例。\r\n         * @returns view 中 Geometry 对于的 y scale 数组\r\n         */\r\n        getYScales(): Scale[];\r\n        /**\r\n         * 获取 x 轴或者 y 轴对应的所有 scale 实例。\r\n         * @param dimType x | y\r\n         * @returns x 轴或者 y 轴对应的所有 scale 实例。\r\n         */\r\n        getScalesByDim(dimType: 'x' | 'y'): Record<string, Scale>;\r\n        /**\r\n         * 根据字段名去获取 scale 实例。\r\n         * @param field 数据字段名称\r\n         * @param key id\r\n         */\r\n        getScale(field: string, key?: string): Scale;\r\n        /**\r\n         * @deprecated\r\n         * This method will be removed at G2 V4.1. Please use `getScale`.\r\n         */\r\n        getScaleByField(field: string, key?: string): Scale;\r\n        /**\r\n         * 返回所有配置信息。\r\n         * @returns 所有的 view API 配置。\r\n         */\r\n        getOptions(): Options;\r\n        /**\r\n         * 获取 view 的数据（过滤后的数据）。\r\n         * @returns 处理过滤器之后的数据。\r\n         */\r\n        getData(): Data;\r\n        /**\r\n         * 获取原始数据\r\n         * @returns 传入 G2 的原始数据\r\n         */\r\n        getOriginalData(): Data;\r\n        /**\r\n         * 获取布局后的边距 padding\r\n         * @returns\r\n         */\r\n        getPadding(): Padding;\r\n        /**\r\n         * 获取当前 view 有的 geometries\r\n         * @returns\r\n         */\r\n        getGeometries(): Geometry<ShapePoint>[];\r\n        /**\r\n         * 获取 view 中的所有 geome\r\n         */\r\n        getElements(): Element_2[];\r\n        /**\r\n         * 根据一定的规则查找 Geometry 的 Elements。\r\n         *\r\n         * ```typescript\r\n         * getElementsBy((element) => {\r\n         *   const data = element.getData();\r\n         *\r\n         *   return data.a === 'a';\r\n         * });\r\n         * ```\r\n         *\r\n         * @param condition 定义查找规则的回调函数。\r\n         * @returns\r\n         */\r\n        getElementsBy(condition: (element: Element_2) => boolean): Element_2[];\r\n        /**\r\n         * 获得绘制的层级 group。\r\n         * @param layer 层级名称。\r\n         * @returns 对应层级的 Group。\r\n         */\r\n        getLayer(layer: LAYER): IGroup;\r\n        /**\r\n         * 对外暴露方法，判断一个点是否在绘图区域（即坐标系范围）内部。\r\n         * @param point 坐标点\r\n         */\r\n        isPointInPlot(point: Point): boolean;\r\n        /**\r\n         * 获得所有的 legend 对应的 attribute 实例。\r\n         * @returns 维度字段的 Attribute 数组\r\n         */\r\n        getLegendAttributes(): Attribute[];\r\n        /**\r\n         * 获取所有的分组字段的 scale 实例。\r\n         * @returns 获得分组字段的 scale 实例数组。\r\n         */\r\n        getGroupScales(): Scale[];\r\n        /**\r\n         * 获取 G.Canvas 实例。\r\n         * @returns G.Canvas 画布实例。\r\n         */\r\n        getCanvas(): ICanvas;\r\n        /**\r\n         * 获得根节点 view。\r\n         */\r\n        getRootView(): View;\r\n        /**\r\n         * 获取该数据在可视化后，对应的画布坐标点。\r\n         * @param data 原始数据记录\r\n         * @returns 对应的画布坐标点\r\n         */\r\n        getXY(data: Datum): Point;\r\n        getController(name: 'tooltip'): Tooltip;\r\n        getController(name: 'axis'): Axis;\r\n        getController(name: 'legend'): Legend;\r\n        getController(name: 'scrollbar'): Scrollbar;\r\n        getController(name: 'slider'): Slider;\r\n        getController(name: 'annotation'): Annotation;\r\n        getController(name: 'gestucre'): GestureController;\r\n        getController(name: string): Controller;\r\n        /**\r\n         * 显示 point 坐标点对应的 tooltip。\r\n         * @param point 画布坐标点\r\n         * @returns View\r\n         */\r\n        showTooltip(point: Point): View;\r\n        /**\r\n         * 隐藏 tooltip。\r\n         * @returns View\r\n         */\r\n        hideTooltip(): View;\r\n        /**\r\n         * 将 tooltip 锁定到当前位置不能移动。\r\n         * @returns View\r\n         */\r\n        lockTooltip(): View;\r\n        /**\r\n         * 将 tooltip 锁定解除。\r\n         * @returns View\r\n         */\r\n        unlockTooltip(): View;\r\n        /**\r\n         * 是否锁定 tooltip。\r\n         * @returns 是否锁定\r\n         */\r\n        isTooltipLocked(): boolean;\r\n        /**\r\n         * 获取当前 point 对应的 tooltip 数据项。\r\n         * @param point 坐标点\r\n         * @returns tooltip 数据项\r\n         */\r\n        getTooltipItems(point: Point): any[];\r\n        /**\r\n         * 获取逼近的点的数据集合\r\n         * @param point 当前坐标点\r\n         * @returns  数据\r\n         */\r\n        getSnapRecords(point: Point): any[];\r\n        /**\r\n         * 获取所有的 pure component 组件，用于布局。\r\n         */\r\n        getComponents(): ComponentOption[];\r\n        /**\r\n         * 将 data 数据进行过滤。\r\n         * @param data\r\n         * @returns 过滤之后的数据\r\n         */\r\n        filterData(data: Data): Data;\r\n        /**\r\n         * 对某一个字段进行过滤\r\n         * @param field\r\n         * @param data\r\n         */\r\n        filterFieldData(field: string, data: Data): Data;\r\n        /**\r\n         * 调整 coordinate 的坐标范围。\r\n         */\r\n        adjustCoordinate(): void;\r\n        protected paint(isUpdate: boolean): void;\r\n        /**\r\n         * 渲染背景样式的 shape。\r\n         * 放到 view 中创建的原因是让使用 view 绘制图形的时候，也能够处理背景色\r\n         */\r\n        private renderBackgroundStyleShape;\r\n        /**\r\n         * 递归计算每个 view 的 padding 值，coordinateBBox 和 coordinateInstance\r\n         * @param isUpdate\r\n         */\r\n        protected renderPaddingRecursive(isUpdate: boolean): void;\r\n        /**\r\n         * 递归处理 view 的布局，最终是计算各个 view 的 coordinateBBox 和 coordinateInstance\r\n         * @param isUpdate\r\n         */\r\n        protected renderLayoutRecursive(isUpdate: boolean): void;\r\n        /**\r\n         * 最终递归绘制组件和图形\r\n         * @param isUpdate\r\n         */\r\n        protected renderPaintRecursive(isUpdate: boolean): void;\r\n        /**\r\n         * 创建 scale，递归到顶层 view 去创建和缓存 scale\r\n         * @param field\r\n         * @param data\r\n         * @param scaleDef\r\n         * @param key\r\n         */\r\n        protected createScale(field: string, data: Data, scaleDef: ScaleOption, key: string): Scale;\r\n        /**\r\n         * 递归渲染中的数据处理\r\n         * @param isUpdate\r\n         */\r\n        private renderDataRecursive;\r\n        /**\r\n         * 计算 region，计算实际的像素范围坐标\r\n         * @private\r\n         */\r\n        private calculateViewBBox;\r\n        /**\r\n         * 初始化事件机制：G 4.0 底层内置支持 name:event 的机制，那么只要所有组件都有自己的 name 即可。\r\n         *\r\n         * G2 的事件只是获取事件委托，然后在 view 嵌套结构中，形成事件冒泡机制。\r\n         * 当前 view 只委托自己 view 中的 Component 和 Geometry 事件，并向上冒泡\r\n         * @private\r\n         */\r\n        private initEvents;\r\n        private onCanvasEvent;\r\n        /**\r\n         * 初始化插件\r\n         */\r\n        private initComponentController;\r\n        private createViewEvent;\r\n        /**\r\n         * 触发事件之后\r\n         * @param evt\r\n         */\r\n        private onDelegateEvents;\r\n        /**\r\n         * 处理 PLOT_EVENTS\r\n         * plot event 需要处理所有的基础事件，并判断是否在画布中，然后再决定是否要 emit。\r\n         * 对于 mouseenter、mouseleave 比较特殊，需要做一下数学比较。\r\n         * @param e\r\n         */\r\n        private doPlotEvent;\r\n        /**\r\n         * 处理筛选器，筛选数据\r\n         * @private\r\n         */\r\n        private doFilterData;\r\n        /**\r\n         * 初始化 Geometries\r\n         * @private\r\n         */\r\n        private initGeometries;\r\n        /**\r\n         * 根据 Geometry 的所有字段创建 scales\r\n         * 如果存在，则更新，不存在则创建\r\n         */\r\n        private createOrUpdateScales;\r\n        /**\r\n         * 处理 scale 同步逻辑\r\n         */\r\n        private syncScale;\r\n        /**\r\n         * 获得 Geometry 中的 scale 对象\r\n         */\r\n        private getGeometryScales;\r\n        private getScaleFields;\r\n        private getGroupedFields;\r\n        /**\r\n         * 调整 scale 配置\r\n         * @private\r\n         */\r\n        private adjustScales;\r\n        /**\r\n         * 调整分类 scale 的 range，防止超出坐标系外面\r\n         * @private\r\n         */\r\n        private adjustCategoryScaleRange;\r\n        /**\r\n         * 根据 options 配置、Geometry 字段配置，自动生成 components\r\n         * @param isUpdate 是否是更新\r\n         * @private\r\n         */\r\n        private initComponents;\r\n        private doLayout;\r\n        /**\r\n         * 创建坐标系\r\n         * @private\r\n         */\r\n        private createCoordinate;\r\n        /**\r\n         * 根据 options 配置自动渲染 geometry\r\n         * @private\r\n         */\r\n        private paintGeometries;\r\n        /**\r\n         * 最后的绘制组件\r\n         * @param isUpdate\r\n         */\r\n        private renderComponents;\r\n        /**\r\n         * 渲染分面，会在其中进行数据分面，然后进行子 view 创建\r\n         * @param isUpdate\r\n         */\r\n        private renderFacet;\r\n        private initOptions;\r\n        private createGeometry;\r\n        /**\r\n         * scale key 的创建方式\r\n         * @param field\r\n         */\r\n        private getScaleKey;\r\n    }\r\n\r\n    declare type ViewAppendPadding = number | number[];\r\n\r\n    /**\r\n     * @title View 构造参数\r\n     */\r\n    declare interface ViewCfg {\r\n        /**\r\n         * @title View id，可以由外部传入\r\n         */\r\n        readonly id?: string;\r\n        /**\r\n         * @title 当前 view 的父级 view。\r\n         */\r\n        readonly parent: View;\r\n        /**\r\n         * @title canvas 实例。\r\n         */\r\n        readonly canvas: ICanvas;\r\n        /**\r\n         * @title 前景层\r\n         */\r\n        readonly foregroundGroup: IGroup;\r\n        /**\r\n         * @title 中间层\r\n         */\r\n        readonly middleGroup: IGroup;\r\n        /**\r\n         * @title 背景层\r\n         */\r\n        readonly backgroundGroup: IGroup;\r\n        /**\r\n         * @title view 的绘制范围\r\n         */\r\n        readonly region?: Region;\r\n        /**\r\n         * @title 是否对超出坐标系范围的 Geometry 进行剪切\r\n         */\r\n        readonly limitInPlot?: boolean;\r\n        /**\r\n         * @title 内边距\r\n         * @description 设置图表的内边距，使用方式参考 CSS 盒模型，下图黄色区域即为 padding 的范围。\r\n         * @see ![](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*pYwiQrdXGJ8AAAAAAAAAAABkARQnAQ)\r\n         * @example\r\n         * 1. padding: 20\r\n         * 2. padding: [ 10, 30, 30 ]\r\n         */\r\n        readonly padding?: ViewPadding;\r\n        /**\r\n         * @title 额外边距\r\n         * @description 设置图表的内边距在padding的基础上增加appendPadding的调整。\r\n         * @example\r\n         * 1. padding: 20\r\n         * 2. padding: [ 10, 30, 30 ]\r\n         */\r\n        readonly appendPadding?: ViewAppendPadding;\r\n        /**\r\n         * @title 是否同步子 view 的 padding\r\n         * @description 是否同步子 view 的 padding，可以是 boolean / SyncViewPaddingFn\r\n         * @example\r\n         *  view1 的 padding 10\r\n         *  view2 的 padding 20\r\n         *  那么两个子 view 的 padding 统一变成最大的 20.\r\n         *\r\n         * 如果是 Funcion，则使用自定义的方式去计算子 view 的 padding，这个函数中去修改所有的 views autoPadding 值\r\n         */\r\n        readonly syncViewPadding?: boolean | SyncViewPaddingFn;\r\n        /**\r\n         * @title 主题\r\n         * @description 设置 view 实例主题\r\n         */\r\n        readonly theme?: LooseObject | string;\r\n        /**\r\n         * @title 图表组件、图形映射等相关的配置。\r\n         */\r\n        readonly options?: Options;\r\n        /**\r\n         * @title 是否可见\r\n         */\r\n        readonly visible?: boolean;\r\n    }\r\n\r\n    /**\r\n     * @title 用于配置型式的 View 声明方式\r\n     */\r\n    declare interface ViewOption {\r\n        /**\r\n         * @title view 的唯一表示 ID\r\n         */\r\n        readonly id?: string;\r\n        /**\r\n         * @title view 的绘制范围，起始点为左上角。\r\n         */\r\n        readonly region?: Region;\r\n        /**\r\n         * 设置图表的内边距，使用方式参考 CSS 盒模型。\r\n         * 下图黄色区域即为 padding 的范围。\r\n         * ![](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*pYwiQrdXGJ8AAAAAAAAAAABkARQnAQ)\r\n         *\r\n         * @example\r\n         * 1. padding: 20\r\n         * 2. padding: [ 10, 30, 30 ]\r\n         */\r\n        readonly padding?: ViewPadding;\r\n        /**\r\n         * @title 设置主题。\r\n         */\r\n        readonly theme?: LooseObject | string;\r\n        /**\r\n         * @title 是否可见。\r\n         */\r\n        readonly visible?: boolean;\r\n        /**\r\n         * 图表组件、图形映射等相关的配置。\r\n         */\r\n        readonly options?: Options;\r\n    }\r\n\r\n    declare type ViewPadding = number | number[] | 'auto';\r\n\r\n    export { }\r\n\n        }","container":null,"playgroundDidMount":null,"playgroundWillUnmount":null,"dependencies":null,"devDependencies":{"typescript":"latest"},"htmlCodeTemplate":"<!DOCTYPE html>\n        <html>\n          <head>\n            <meta charset=\"UTF-8\">\n            <title>{{title}}</title>\n          </head>\n          <body>\n            <div id=\"container\" />\n            <script src=\"https://gw.alipayobjects.com/os/lib/antv/g2/4.2.8/dist/g2.min.js\"></script>\n            <script src=\"https://gw.alipayobjects.com/os/antv/pkg/_antv.data-set-0.11.1/dist/data-set.js\"></script>\n            <script>\n            <!-- 浏览器引入，请使用全局命名空间 G2，如 new Chart() 改为 new G2.Chart，即可运行。 -->\n            {{code}}\n            </script>\n          </body>\n        </html>"}}}}}